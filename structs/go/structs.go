// DO NOT EDIT
// This file was machine generated by github.com/wamuir/procurement-data-standard/structs/go

// Package pds defines Golang types for the Procurement Data Standard (xs:schema/@version="2023-1102").
package pds

import (
	"encoding/xml"
	"fmt"
	"time"
)

type XsBase64Binary string

func (x XsBase64Binary) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%s", x), start)
}

func (x *XsBase64Binary) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v string
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsBase64Binary(v)
	return nil
}

type XsDate time.Time

func (x XsDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	v := time.Time(x)
	return e.EncodeElement(v.Format("2006-01-02"), start)
}

func (x *XsDate) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v string
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	t, err := time.Parse("2006-01-02", v)
	if err != nil {
		return err
	}

	*x = XsDate(t)
	return nil
}

type XsDecimal float64

func (x XsDecimal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%f", x), start)
}

func (x *XsDecimal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v float64
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsDecimal(v)
	return nil
}

type XsFloat float64

func (x XsFloat) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%f", x), start)
}

func (x *XsFloat) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v float64
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsFloat(v)
	return nil
}

type XsGYearMonth time.Time

func (x XsGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	v := time.Time(x)
	return e.EncodeElement(v.Format("2006-01"), start)
}

func (x *XsGYearMonth) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v string
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	t, err := time.Parse("2006-01", v)
	if err != nil {
		return err
	}

	*x = XsGYearMonth(t)
	return nil
}

type XsInteger int64

func (x XsInteger) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%d", x), start)
}

func (x *XsInteger) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v int64
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsInteger(v)
	return nil
}

type XsNonNegativeInteger int64

func (x XsNonNegativeInteger) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%d", x), start)
}

func (x *XsNonNegativeInteger) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v int64
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsNonNegativeInteger(v)
	return nil
}

type XsNonPositiveInteger int64

func (x XsNonPositiveInteger) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%d", x), start)
}

func (x *XsNonPositiveInteger) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v int64
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsNonPositiveInteger(v)
	return nil
}

type XsPositiveInteger int64

func (x XsPositiveInteger) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%d", x), start)
}

func (x *XsPositiveInteger) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v int64
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsPositiveInteger(v)
	return nil
}

type XsString string

func (x XsString) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%s", x), start)
}

func (x *XsString) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v string
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsString(v)
	return nil
}

type XsTime time.Time

func (x XsTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	v := time.Time(x)
	return e.EncodeElement(v.Format("2006-01-02T15:04:05"), start)
}

func (x *XsTime) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v string
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	t, err := time.Parse("2006-01-02T15:04:05", v)
	if err != nil {
		return err
	}

	*x = XsTime(t)
	return nil
}

type XsToken string

func (x XsToken) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%s", x), start)
}

func (x *XsToken) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v string
	if err := d.DecodeElement(&v, &start); err != nil {
		return err
	}

	*x = XsToken(v)
	return nil
}

type CDATA struct {
	Value XsString `xml:",cdata"`
}

// The root element for any procurement instrument document
type ProcurementDocument struct {
	// The version of the Procurement Data Standard schema used to produce the procurement instrument. (see list)
	SchemaVersionUsed XsToken

	// The Standard (SF) or Department of Defense (DD) form used to render a copy of the procurement instrument. (see list)
	ProcurementInstrumentForm XsToken

	// Information about the system producing the procurement document.
	OriginatorDetails struct {
		// The internal system identifier of the document by which it is tracked by the system referenced by the DITPR Number.
		InternalDocumentNumber XsString

		// Identifies the Department of Defense system or application used to generate the XML document.
		DoDSystem *struct {
			// The DoD Information Technology Portfolio Repository (DITPR) Number assigned to the application or system that generated the XML document.
			DITPRNumber DITPRType

			// The DoDAAC of the entity that administers the application or system that generated the XML document.
			SystemAdministratorDoDAAC DoDAACType
		}

		// Identifies the system or application used to generate the XML document when it is not a Department of Defense system or application.
		NonDoDSystem *struct {
			// The CAGE, DUNS, Activity Address Code, or other identifier of the organization who administers the application or system. This may or may not be the same entity that uses the application or system.
			NonDoDEntityIdentifier struct {
				// The Activity Address Code (AAC).
				ActivityAddressCode *XsString

				// CAGE: Commercial and Government Entity
				Cage *CAGEType

				// DUNS+4: Data Universal Numbering System identifier with four character suffix.
				Duns4Number *Duns4NumberType

				// DUNS: Data Universal Numbering System Identifier.
				DunsNumber *DunsNumberType

				// Government Unique Entity Identifier.
				GovernmentUniqueEntityIdentifier *GovernmentUniqueEntityIdentifierType

				// Use to provide an identifier that isn't provided as a distinct element.
				AlternateIdentifier *AlternateIdentifierType
			}

			// The name of the application or system.
			SystemName XsString

			// The version of the application or system.
			SystemVersion XsString
		}
	}

	// The award instrument.
	AwardInstrument *AwardInstrumentType

	// The award modification instrument or the solicitation amendment.
	AwardModificationInstrument *AwardModificationInstrumentType
}

type ConstructionInstrumentLocationGroup struct {
	// Division of the contract as defined by the Construction Specifications Institute (May 21, 2010). (see list)
	CSIDivision *CSIDivisionType

	// Division of the contract used in the Standard Procurement System as defined by the Construction Specifications Institute. (see list)
	CSISection *CSISectionType
}

type ProcurementInstrumentLocationGroup struct {
	// Division of the contract as defined by the Construction Specifications Institute (April 2012). (see list)
	CSIDivision *CSIDivisionType

	// Division of the contract used in the Standard Procurement System prior to implementation of the updated Construction Specifications Institute format (April 2012). (see list)
	CSISection *CSISectionType

	// Section of the Federal Uniform Contract Format (UCF). (see list)
	Section *SectionType
}

// Award Instrument document
type AwardInstrumentType struct {
	// Data common to the entire procurement instrument.
	ProcurementInstrumentHeader ProcurementInstrumentHeaderType

	// The line item information of the procurement instrument.
	ContractLineItems []struct {
		// Information about a Contract Data Requirements List (CDRL).
		CDRL []CDRLType

		// Information about contract line items.
		LineItems []LineItemDetailType
	}
}

// Award Modification Instrument or Solicitation Amendment Document.
type AwardModificationInstrumentType struct {
	// Data common to the entire procurement instrument.
	ProcurementInstrumentHeader ProcurementInstrumentHeaderModificationDetails

	// The line item information of the procurement instrument.
	ContractLineItems []struct {
		// Information about added, changed, and deleted Contract Data Requirements List (CDRL).
		CDRL *struct {
			// Contains CDRLs that were added.
			AddedCDRLS []CDRLType

			// Contains CDRLs that were removed.
			DeletedCDRLs []CDRLType

			// Contains CDRLs that were modified.
			ChangedCDRLs []struct {
				// Description of the change to the CDRL.
				CDRLChangeText XsString

				// The CDRL after the change was applied. The result.
				CurrentCDRL CDRLType

				// The CDRL before the change was applied. The original.
				PreviousCDRL CDRLType
			}
		}

		// Information about added, changed, and deleted line items.
		LineItems *struct {
			// Contains line items that were added.
			AddedLineItems []LineItemDetailType

			// Contains line items that were removed.
			DeletedLineItems []LineItemDetailType

			// Contains line items that were modified.
			ChangedLineItems []struct {
				// Descriptive text of the changes made to the line item by UCF section.
				LineItemChangeTextDetails []struct {
					// Description of the line item change that applies to the section/division provided in CSI Division, CSI Section, or Section.
					LineItemChangeText XsString

					ProcurementInstrumentLocationGroup
				}

				// The line item after the change was applied. The result.
				CurrentLineItem LineItemDetailType

				// The line item before the change was applied. The original.
				PreviousLineItem LineItemDetailType
			}
		}
	}
}

type AcceptanceInspectionType struct {
	// Acceptance, Inspection or Both (see list)
	Action AcceptInspectActionType

	// Where the action takes place. (see list)
	Location AcceptInspectLocationType

	// Performance, shipment, delivery, and other criteria that the DoD acceptor and/or inspector must verify has been met by the contractor prior to stating that inspection was passed or to accepting the product/service.
	Instructions XsString
}

type AccountingIdentifierType struct {
	// Reference to the cognizant accounting system. Used instead of the line of accounting.
	AgencyAccountingIdentifier AgencyAccountingIdentifierType

	// Transportation Account Code (TAC)
	TransportationAccountCode *XsString
}

// Contains Address and Contact for modification and amendment purposes.
type AddressContactType struct {
	// The address and organization identifiers.
	Address OrganizationDetailType

	// A contact for the organization/address.
	Contact []ContactType
}

// Award Modification and Solicitation Amendment Address structure.
type AddressDetailModificationType struct {
	// Type of address being changed. (see Address Description list at dodprocurementtoolbox.com)
	AddressDescription *XsString

	// Description of the address when not covered by one of the address description options.
	AlternateAddressDescription *XsString

	// Records addresses and contacts that have been added, removed, or modified.
	AddressContactModificationDetails *struct {
		// Contains addresses that are added.
		AddedAddress *AddressContactType

		// Contains addresses that are removed.
		DeletedAddress *AddressContactType

		// Contains addresses that are modified.
		ChangedAddress *struct {
			// Description of the change to the address and contacts.
			AddressChangeText XsString

			// The address and contacts after the changes were applied. The results.
			CurrentAddress AddressContactType

			// The address and contacts before the changes were applied. The original.
			PreviousAddress AddressContactType
		}
	}

	// Records changes to acceptance and/or inspection instructions when the address denotes an entity performing acceptance, inspection, or both.
	AcceptanceInspection *AcceptanceInspectionType

	// Records changes to a seller's business classification such as Hospital, Large, Small, etc.
	BusinessClassificationModificationDetails *struct {
		// Contains the business classification that is added.
		AddedBusinessClassification *BusinessClassificationType

		// Contains the business classification that is removed.
		DeletedBusinessClassification *BusinessClassificationType

		// Contains the business classification that is modified.
		ChangedBusinessClassification *struct {
			// Description of the change to the business classification.
			BusinessClassificationChangeText XsString

			// The business classification after the changes were applied. The results.
			CurrentBusinessClassification BusinessClassificationType

			// The business classification before the changes were applied. The original.
			PreviousBusinessClassification BusinessClassificationType
		}
	}
}

// Award Address structure
type AddressDetailType struct {
	// Type of address. (see Address Description list at dodprocurementtoolbox.com)
	AddressDescription *XsString

	// Description of the address when not covered by one of the address description options.
	AlternateAddressDescription *XsString

	// The address and organization identifiers.
	Address OrganizationDetailType

	// A contact for the organization/address.
	Contact []ContactType

	// Provides acceptance and/or inspection instructions when the address denotes an entity performing acceptance, inspection, or both.
	AcceptanceInspection *AcceptanceInspectionType

	// Seller's business classification such as Hospital, Large, Small, etc.
	BusinessClassification *BusinessClassificationType
}

// Award Modification and Solicitation Amendment Address structure.
type AddressGroupModificationType struct {
	// Type of address being changed. (see Address Description list at dodprocurementtoolbox.com)
	AddressDescription *XsString

	// Description of the address when not covered by one of the address description options.
	AlternateAddressDescription *XsString

	// Records modifications to existing addresses and contacts.
	AddressContactModificationDetails *struct {
		// Description of the change to the address and contacts.
		AddressChangeText XsString

		// The address and contacts after the changes were applied. The results.
		CurrentAddress AddressContactType

		// The address and contacts before the changes were applied. The original.
		PreviousAddress AddressContactType
	}

	// Records changes to acceptance and/or inspection instructions when the address denotes an entity performing acceptance, inspection, or both.
	AcceptanceInspection *AcceptanceInspectionType

	// Records changes to a seller's business classification such as Hospital, Large, Small, etc.
	BusinessClassificationModificationDetails *struct {
		// Contains the business classification that is added.
		AddedBusinessClassification *BusinessClassificationType

		// Contains the business classification that is removed.
		DeletedBusinessClassification *BusinessClassificationType

		// Contains the business classification that is modified.
		ChangedBusinessClassification *struct {
			// Description of the change to the business classification.
			BusinessClassificationChangeText XsString

			// The business classification after the changes were applied. The results.
			CurrentBusinessClassification BusinessClassificationType

			// The business classification before the changes were applied. The original.
			PreviousBusinessClassification BusinessClassificationType
		}
	}
}

type AgencySpecifiedPackagingType struct {
	// The authoritative agency the packaging code. (see list)
	AgencyQualifier XsToken

	// Packaging characteristic code.
	AgencyPackagingCode XsString

	// Use to provide an explanation or additional information about the agency packaging code.
	SupplementalInstructions *XsString
}

type AlternateIdentifierType struct {
	// A brief title or description of the alternate identifier.
	Description XsString

	// The value of the alternate identifier.
	Value XsString
}

type AmountType struct {
	// Type of Amount. If multiple Cancellation Ceilings are provided, must be a multi year contract. (see Amount Description list at dodprocurementtoolbox.com)
	AmountDescription XsString

	// The amount value. On an award, must be greater than zero. On a mod, may be zero or greater only when Amount Description is "Header Only - Total Contract Value".
	Amount DecimalElement5ZeroPlusType

	// May only be provided when Amount Description is Cancellation Ceiling. Required when multiple Cancellation Ceilings are provided.
	CancellationCeilingDateAndDescription *XsString
}

// Attachment structure.
type AttachmentType struct {
	// A description of the attached document.
	AttachmentDescription struct {
		// Description of the attachment. (see Standard Attachment list at dodprocurementtoolbox.com)
		StandardAttachment *XsString

		// Description of the attachment when not covered by one of the standard attachment options.
		OtherAttachment *XsString
	}

	// The name of the attachment including version number if applicable e.g., MIL-STD-130M.
	AttachmentName XsString

	// The attachment contents in binary text. Cannot be provided when Attachment Security Level is populated.
	AttachmentBinaryText *XsBase64Binary

	// The format of the attachment such as Microsoft Word, Power Point, etc. Required when Attachment Binary Text is provided. (see Attachment Data Format list at dodprocurementtoolbox.com)
	AttachmentDataFormat *XsString

	// The date the attached document was created or modified in CCYY-MM-DD format. It is not the date the document was attached to the procurement document.
	AttachmentDate *XsDate

	// An identifier used within the award document to reference the attachment.
	AttachmentNumber *XsString

	// A number such as a MIL-STD Number that describes the attachment.
	AttachmentReferenceIdentifier *XsString

	// The URL of where the attachment is located on the World Wide Web.
	AttachmentURL *XsString

	// Denotes that the attachment should be provided as part of the response to a solicitation. (see list)
	IncludeInResponse *TrueType

	// List of potential offerors that are allowed to see the attachment. Only allowed on solicitations and amendments.
	RestrictedAccessList *struct {
		// Commercial and Government Entity (CAGE) of a potential offeror allowed to view the attachment.
		RestrictedCage []CAGEType

		// Data Universal Numbering System identifier (DUNS) of a potential offeror allowed to view the attachment.
		RestrictedDunsNumber []DunsNumberType

		// Government Unique Entity Identifier of a potential offeror allowed to view the attachment.
		RestrictedGovernmentUniqueEntityIdentifier []GovernmentUniqueEntityIdentifierType

		// Denotes that the attachment is restricted but the list of offerors has not been determined.
		RestrictedUnknownList *TrueType
	}
}

// Business classification structure.
type BusinessClassificationType struct {
	// Type of organization such as large or small. (see list)
	OrganizationType XsToken

	// Type of business such as disadvantaged, women owned, hospital etc.
	BusinessType []BusinessTypeType
}

// Contractor Business Type structure.
type BusinessTypeType struct {
	// Business category from the System for Award Management (SAM). (see Business Type Description list at dodprocurementtoolbox.com)
	BusinessTypeDescription XsString

	// Specific business type for the category provided in Business Type Description; from the System for Award Management (SAM). (see Business Type list at dodprocurementtoolbox.com)
	BusinessTypeValue []XsString
}

type CDRLAcceptanceInspectionType struct {
	// Acceptance, Inspection or Both (see list)
	Action AcceptInspectActionType

	// Where the action takes place. (see list)
	Location AcceptInspectLocationType

	// Additional instructions for the accepting and/or inspecting entity.
	Instructions *XsString

	// Contains relevant information that cannot be provided elsewhere.
	AdditionalInformation *XsString
}

type CDRLApprovalDetailsType struct {
	// Name of the preparer of the CDRL.
	PreparedBy XsString

	// The date the preparer signed the CDRL. Date in CCYY-MM-DD format.
	PreparedDate XsDate

	// Name of the CDRL approval authority.
	ApprovedBy XsString

	// The date the CDRL was approved. Date in CCYY-MM-DD format.
	ApprovedDate XsDate
}

type CDRLDetailsType struct {
	// The exhibit serial number. If the Exhibit is one character, then provide 3 characters: position 1 must be 0-9, positions 2 and 3 must be 0-9 and A-Z. If the Exhibit is two characters, then provide 2 characters (0-9 and A-Z). Do no use the letter I or O.
	ElinNumber ElinNumberType

	// The Data Item Description (DID) number, military specification number, or military standard number listed in the DoD 5010.12-L (AMSDL), or one-time DID number, that defines the data content and format requirements.
	DataAcquisitionDocumentNumber XsString

	// The title of the data item as it appears on the data acquisition document.
	DataItemTitle XsString

	// Enter subtitle of data item for further definition of data item.
	DataItemSubTitle *XsString

	// The delivery frequency of the data items to be delivered. (see list)
	DeliveryFrequency XsToken

	// When Delivery Frequency contains "Number of Times to be Submitted", provided the number of submissions.
	DeliveryFrequencyTimes *XsPositiveInteger

	// States whether or not there is a requirement to approve a draft before the preparation of the final data item."
	DraftApproval TrueFalseType

	// The technical office responsible for ensuring the adequacy of the data item.
	RequiringOffice XsString

	// The names and signature dates of the authority who prepares and approves.
	CDRLApprovalDetails CDRLApprovalDetailsType

	// Dates associated with the Contract Data Requirements List (CDRL).
	CDRLDates []struct {
		// Description of the provided date such as date of first submission. (see list)
		CDRLDateDescription XsToken

		// Date in CCYY-MM-DD format.
		CDRLDate *XsDate

		// Contract Data Requirements List (CDRL) lead time information.
		CDRLLeadTime *DeliveryLeadTimeType1

		// Contains relevant information that cannot be provided elsewhere.
		AdditionalInformation *XsString
	}

	// Details about the effort used to develop an estimated data item price. (Reference DD Form 1423)
	ContractorPriceDetails *struct {
		// The price group used to develop the estimated price. (see list)
		PriceGroup XsToken

		// The total estimated price attributable to the production or development of the data item for the government.
		EstimatedTotalPrice DecimalElement5ZeroPlusType
	}

	// The reference to tasking in the procurement instrument that generates the requirements for the data item, for example Statement of Work, paragraph number etc.
	ContractReference XsString

	// To whom and how many copies are to be delivered.
	DistributionDetails []DistributionDetailsType

	// For technical data, the requirement for the contractor to mark the appropriate distribution statement on the data.
	DistributionStatement *struct {
		// The code letter corresponding to the distribution statement. Refer to DoDD 5230.24 (see list)
		CodeLetter *XsToken

		// Used when the appropriate statement is not known or it may vary among specification submissions of the data item.
		GovernmentProvided *TrueType

		// Contains the text of the distribution statement.
		DistributionStatementText *XsString
	}

	// Details about inspection and acceptance.
	InspectionAcceptance struct {
		// Denotes that a transmittal letter is required.
		TransmittalLetter *TrueType

		// Contains the text of the transmittal letter provided by the Government.
		TransmittalLetterText *XsString

		// The requirements for the inspection/acceptance of the data item by the government.
		SourceOrDestination []CDRLAcceptanceInspectionType
	}
}

// CDRL structure.
type CDRLType struct {
	// Enter the first (A-Z) or first two (AA-ZZ) characters of the exhibit line item. Do not use the letter I or O. (Block B)
	Exhibit ElinBaseType

	// Specify the System or item being acquired that the data will support.
	SystemItemSupported XsString

	// The category details of the data item.
	CategoryDetails struct {
		// The category of data in the CDRL. (see list)
		DataCategory XsToken

		// When the Category is specified as "Other", provide additional description.
		CategoryDescription *XsString
	}

	// The parent contract line item number of the exhibit line item.
	ParentLineItem ParentClinType

	// The details about a Contract Data Requirements List (CDRL).
	CDRLDetails []CDRLDetailsType
}

type ClauseDetailsType struct {
	// Regulation or Supplement name such as FAR, DFARS and AFARS. (see Regulations And Supplements list at dodprocurementtoolbox.com)
	RegulationOrSupplement *XsString

	// Issuing Activity name if clause or provision source is not found in the Regulation Or Supplement list. For example, NAVAIR and MICOM.
	IssuingActivity *XsString

	// The clause or provision number.
	ClauseNumber XsString

	// The title of the clause or provision.
	ClauseTitle XsString

	// The year and month the clause or provision became effective. (Use CCYY-MM format, where CC stands for century.)
	ClauseEffectiveDate XsGYearMonth

	// Denotes if the clause or provision is an alternate or a deviation.
	ClauseVariation []struct {
		// Denotes whether the clause or provision variation was an alternate or deviation. (see list)
		AlternateOrDeviation XsToken

		// The year and month the clause or provision variation became effective. (Use CCYY-MM format, where CC stands for century.)
		VariationEffectiveDate XsGYearMonth

		// When applicable, the alternate or deviation name. For example, for "Alternate A", value in Variation Name would be "A".
		VariationName *XsString
	}

	// The complete text or the filled in text of the clause or provision.
	ClauseText *ClauseTextType

	ProcurementInstrumentLocationGroup
}

// Fill-in text details needed for Referenced Clause, if applicable. Used in Reference Clause Text Type.
type ClauseFillinTextType struct {
	// The clause or provision fill in sequence number.
	FillinSequenceNumber XsPositiveInteger

	// The text inserted into the clause or provision as denoted by the Fill In Sequence Number.
	FillinText XsString
}

type ClauseModificationType struct {
	// Contains clauses or provisions that are added.
	AddedClauses []ClauseDetailsType

	// Contains clauses or provisions that are removed.
	DeletedClauses []ClauseDetailsType

	// Contains clauses or provisions that are modifiied.
	ChangedClauses []struct {
		// Description of the change to the clause or provision.
		ClauseChangeText XsString

		// The clause or provision after the changes were applied. The results.
		CurrentClause ClauseDetailsType

		// The clause or provision before the changes were applied. The original.
		PreviousClause ClauseDetailsType
	}
}

// Actual Text of the referenced clause - could be URL and title reference, full text and/or fill-in text.
type ClauseTextType struct {
	// Complete text of the clause or provision.
	ClauseFullText *XsString

	// Complete text of the clause or provision with html tags. Contents must be enclosed with CDATA.
	FormattedClauseFullText *CDATA

	// Use this section to provide only the fill-in text as required to complete the clause or provision in the regulation, and apply the clause or provision to this transaction.
	ClauseFillinText []ClauseFillinTextType
}

// Not for LOA reference. Used for other than LOA reference.
type CLINAccountingDetailType1 struct {
	// Type of delivery reference. (see list)
	DeliveryReferenceDescription XsToken

	// Delivery reference code or number.
	DeliveryReferenceValue XsString
}

// Information specific to construction contracts.
type ConstructionProjectDetailsType struct {
	// The location of the construction project described as text. One or more of Construction Project Location, Construction Project Coordinates, and Construction Project Address must be provided.
	ConstructionProjectLocation *XsString

	// The construction project number.
	ConstructionProjectNumber *XsString

	// The title of the construction project.
	ConstructionProjectTitle *XsString

	// The address of the location of the construction project. One or more of Construction Project Location, Construction Project Coordinates, and Construction Project Address must be provided.
	ConstructionProjectAddress *OrganizationAddressType

	// The latitude and longitude of the construction project. One or more of Construction Project Location, Construction Project Coordinates, and Construction Project Address must be provided.
	ConstructionProjectCoordinates *LocationCoordinatesType
}

// Person contact detail.
type ContactType struct {
	// The title or function of the person or entity.
	TitleOrFunction *XsString

	// Name of the person or entity.
	Name XsString

	// When multiple government contacts are provided on a solicitation, identifies the primary and secondary contact. (see list)
	GovernmentPointOfEntryIdentifier *XsToken

	// The grade of the person when applicable.
	Grade *XsString

	// Additional information such as the Org Code that further identifies a contact. For example, "AIR-2.5.2", "SFCA-PC", etc.
	OfficeCode *XsString

	// Means of communication with the contact.
	ContactMethod []struct {
		// The method to be used to contact the person or entity. (see list)
		MethodDescription XsToken

		// The communications details denoted by the value in Method Description.
		MethodValue XsString
	}
}

// Marks and Numbers identifying shipping Containers.
type ContainerMarksNumbers struct {
	// A mark that will appear on all containers or items identically.
	MarkOnAll []MarkLabelType

	// Mark value to be placed on a shipment container or an item.
	SingleMark []MarkLabelType

	// Range of marks to be applied to the shipment containers or the items.
	MarkRange []MarkRangeType
}

// Obligated amount structure at header level.
type ContractObligatedAmountType struct {
	// Obligation amount.
	ObligatedAmount DecimalElement5OverZeroType

	// One or more codes or numbers referencing a funding line. Accounting Classification Reference Number (ACRN) must be provided.
	FinancialReference []FinancialReferenceType

	// Where financial data is accounted for.
	AccountingIdentifier *AccountingIdentifierType

	// Financial information based on a line of accounting.
	LoaDetails *struct {
		// Use only when the line of accounting cannot be represented by its individual components.
		Blob *XsString

		// The Line Of Accounting represented by its individual components.
		LOA []LoaCodeType

		// The Standard Line Of Accounting (SLOA) represented by its individual components.
		SLOA []struct {
			// SLOA Component description. (see SLOA Component list at dodprocurementtoolbox.com)
			SLOAComponentTitle XsString

			// The value of the component listed in SLOA Component Title.
			SLOAComponentValue XsString
		}
	}
}

type CountyCityStateType struct {
	// Name of the state.
	State XsString

	// Name of an independent city within the State.
	IndependentCity []XsString

	// Name of a county within the State.
	County []XsString
}

type CurrencyDetailsType struct {
	// The textual name of the foreign currency the procurement instrument is issued in from ISO 4217 from the International Organization for Standardization. (see Currency list at dodprocurementtoolbox.com)
	BuyingCurrency *XsString

	// The textual name of the foreign currency in which payment is authorized and will be made from ISO 4217 from the International Organization for Standardization. (see Currency list at dodprocurementtoolbox.com)
	PaymentCurrency *XsString
}

// A generic start-end date only type without period description.
type DateOnlyPeriodType struct {
	// Period start date defined as CCYY-MM-DD
	StartDate XsDate

	// Period end date defined as CCYY-MM-DD
	EndDate XsDate
}

// A generic start-end date only type with period description.
type DatePeriodDescriptionType struct {
	// Type of period. (see list)
	PeriodDescription PeriodDescriptionType

	// Period start date defined as CCYY-MM-DD
	StartDate XsDate

	// Period end date defined as CCYY-MM-DD
	EndDate XsDate
}

type DatePeriodType struct {
	// The starting date of the period.
	PeriodStart DateTimeType

	// The ending date of the period.
	PeriodEnd DateTimeType
}

// Dates other than delivery, used in award header only.
type DatesHeaderOnlyType struct {
	// Effective date of the procurement instrument. Date in CCYY-MM-DD format. Required on an award.
	ProcurementInstrumentEffectiveDate *XsDate

	// A period of time applicable to the procurement instrument.
	ProcurementInstrumentPeriods []DatePeriodDescriptionType

	// The Contracting officer's name, contact information, and signature date. The signature date is also known as the Award date. Required on an award.
	ContractingOfficer *SigneeType

	// The Contractor's name, contact information, and signature date. May only have more than one when Procurement Instrument Form is SF 252. May not be provided on a solicitation.
	ContractorRepresentative []SigneeType
}

// Dates other than delivery, used in modification and amendment header only.
type DatesModificationHeaderOnlyType struct {
	// Effective date of the represented procurement instrument. Date in CCYY-MM-DD format.
	ProcurementInstrumentEffectiveDate XsDate

	// The Contracting officer's name, contact information, and signature date. The signature date is also known as the Award date.
	ContractingOfficer *SigneeType

	// The Contractor's name, contact information, and signature date. May only have more than one when Procurement Instrument Form is SF 252. May not be provided on a solicitation amendment.
	ContractorRepresentative []SigneeType
}

// A generic type for Date and 24 hour clock time with time zone.
type DateTimeType struct {
	// Date in CCYY-MM-DD format.
	DateElement XsDate

	// Time including time zone.
	TimeElement *struct {
		// Time using a 24 hour clock in HH:MI:SS format.
		TimeElement XsTime

		// The time zone of the value provided in Time Element. (see Time Zone list at dodprocurementtoolbox.com)
		TimeZone XsString
	}
}

type DavisBaconActType struct {
	// The DBA wage determination number. Generally numbered with a two-letter state abbreviation (VA), the latest year of publication (03), and the sequential number assigned to the particular wage determination (0001). The resulting wage determination number is VA030001.
	GeneralDecisionNumber XsString

	// The modification number of the wage determination.
	ModificationNumber *XsString

	// The publication date of the wage determination. Date in CCYY-MM-DD format.
	PublicationDate XsDate

	// The previous wage determination number that the wage determination provided in General Decision Number replaces.
	SupersededGeneralDecisionNumber *XsString

	// List of modifications to the wage determination provided in General Decision Number.
	ModificationList []struct {
		// The number of the modification.
		ModificationNumber XsNonNegativeInteger

		// The publication date of the modification. Date in CCYY-MM-DD format.
		PublicationDate XsDate
	}

	// The counties and cities within a state to which the wage determination applies.
	CountyCityState []CountyCityStateType

	// Information on the type of construction to which the wage determination applies.
	ConstructionIdentifier struct {
		// Type of construction (see list).
		ConstructionName XsToken

		// When needed, further information on the type of construction.
		ConstructionDescription *XsString
	}

	// Occupation codes, titles, rates and fringes.
	Occupation []struct {
		// The collective bargaining agreement for rates, usually made with a union or local organization. For example, ELEC1340-007.
		CollectiveBargainingAgreement *XsString

		// The number of the survey conducted by the Department of Labor when no collective bargaining agreement is applicable. For example, SUVA1998-0004.
		DepartmentOfLaborSurvey *XsString

		// The date associated with the Occupation Code. Date in CCYY-MM-DD format.
		AgreementOrSurveyDate XsDate

		// High level occupation title.
		OccupationTitle XsString

		// Occupation sub-titles, rates and fringes.
		OccupationDetail []struct {
			// The occupation sub-title.
			OccupationSubTitle *XsString

			// The minimum wage requirement.
			Rate DecimalElement2OverZeroType

			// The minimum fringe benefit requirement.
			Fringe *DecimalElement2OverZeroType
		}
	}

	// Additional information.
	DavisBaconActText XsString
}

type DeliveryDatesType struct {
	// Categorizes the date, month, period of the delivery. (see list)
	DeliveryDescription DeliveryDescriptionType

	// A date (and time) relevant to a delivery.
	DeliveryDate *DateTimeType

	// A month relevant to a delivery in CCYY-MM format.
	DeliveryMonth *XsGYearMonth

	// A beginning and end date (time) relevant to a delivery.
	DeliveryPeriod *DatePeriodType
}

// Delivery structure used in an award modification or solicitation amendment document.
type DeliveryDetailsModificationType struct {
	// Dates or date ranges that relate to a delivery.
	DeliveryDates *struct {
		// Contains delivery dates that are added.
		AddedDeliveryDates []DeliveryDatesType

		// Contains delivery dates that are removed.
		DeletedDeliveryDates []DeliveryDatesType

		// Contains delivery dates that are modified.
		ChangedDeliveryDates []struct {
			// Description of the change to the delivery date.
			DeliveryDateChangeText XsString

			// The delivery date after the change was applied. The result.
			CurrentDeliveryDate DeliveryDatesType

			// The delivery date before the change was applied. The original.
			PreviousDeliveryDate DeliveryDatesType
		}
	}

	// Delivery lead time information.
	DeliveryLeadTime *struct {
		// Contains lead time information that is added.
		AddedLeadTime []DeliveryLeadTimeType1

		// Contains lead time information that is removed.
		DeletedLeadTime []DeliveryLeadTimeType1

		// Contains lead time information that is modified.
		ChangedLeadTime []struct {
			// Description of the change to the lead time information.
			LeadTimeChangeText XsString

			// The lead time information after the change was applied. The result.
			CurrentLeadTime DeliveryLeadTimeType1

			// The lead time information before the change was applied. The original.
			PreviousLeadTime DeliveryLeadTimeType1
		}
	}

	// Information on Special handling and hazardous material.
	DeliverySpecialHandling []DeliverySpecialHandlingHazmatModificationType

	// Action to be taken when the maximum total order amount is exceeded by the contractor.
	ExcessDeliveryAction *ExcessDeliveryActionType

	// Indicates consignee or a shipping contact must be notified to schedule a delivery.
	PreDeliveryNotification *TrueFalseType
}

// Delivery structure used in an award document.
type DeliveryDetailsType struct {
	// Dates or date ranges that relate to a delivery.
	DeliveryDates []DeliveryDatesType

	// Delivery lead time information.
	DeliveryLeadTime []DeliveryLeadTimeType1

	// Information on Special handling and hazardous material.
	DeliverySpecialHandling []DeliverySpecialHandlingHazmatType

	// Action to be taken when the maximum total order amount is exceeded by the contractor.
	ExcessDeliveryAction *ExcessDeliveryActionType

	// Indicates consignee or a shipping contact must be notified to schedule a delivery.
	PreDeliveryNotification *TrueFalseType
}

type DeliveryLeadTimeType1 struct {
	// Description of delivery lead time. (see list)
	LeadTimeDescription DeliveryLeadTimeQualifierType

	// The unit and value of the lead time. For example 10 workdays.
	DeliveryLeadTime DurationType

	// The specified event from whose occurrence an option is exercised or delivery is scheduled. (see list)
	LeadTimeEvent *XsToken

	// Description of the lead time event when not covered by one of the lead time event options.
	AlternateLeadTimeEvent *XsString

	// Whether or not a performance period is mandatory or negotiable. Required when Procurement Instrument Form is SF 1442. Not allowed for any other value of Procurement Instrument Form. (see list)
	PerformancePeriodFirmness *XsToken

	// Comments related to the period of performance. May only be provided when Procurement Instrument Form is SF 1442.
	PerformancePeriodComments *XsString
}

// Specify transportation special handling instructions and Hazardous material information.
type DeliverySpecialHandlingHazmatModificationType struct {
	// Contains special transportation handling instructions. (see list)
	SpecialHandlingCode *DeliverySpecialHandlingType

	// Use to provide the Hazardous Material Class Code and its source.
	HazardousMaterial *HazardousMaterialType

	// Contains relevant information that cannot be provided elsewhere.
	AdditionalInformation *XsString
}

// Specify transportation special handling instructions and Hazardous material information.
type DeliverySpecialHandlingHazmatType struct {
	// Contains special transportation handling instructions. (see list)
	SpecialHandlingCode *DeliverySpecialHandlingType

	// Use to provide the Hazardous Material Class Code and its source.
	HazardousMaterial *HazardousMaterialType

	// Contains relevant information that cannot be provided elsewhere.
	AdditionalInformation *XsString
}

// Line item type and numbering based on DFARS.
type DFARSLineItemType struct {
	// Unique identifier for a line item other than an exhibit line item.
	LineItem *LineItemsType

	// Unique identifier for an exhibit line item.
	ExhibitLineItem *ExhibitLineItemType
}

// Ordering discount structure used in an award modification or solicitation amendment document.
type DiscountDetailModificationType1 struct {
	// Records changes to the general discounts.
	OtherDiscounts *struct {
		// Contains general discounts that are added.
		AddedOtherDiscounts []OtherDiscountsType

		// Contains general discounts that are removed.
		DeletedOtherDiscounts []OtherDiscountsType

		// Contains general discounts that are modified.
		ChangedOtherDiscounts []struct {
			// Description of the change to the general discount.
			OtherDiscountChangeText XsString

			// The general discount after the changes were applied. The results.
			CurrentOtherDiscount OtherDiscountsType

			// The general discount before the changes were applied. The original.
			PreviousOtherDiscount OtherDiscountsType
		}
	}

	// Records changes to discounts based on a range or a threshold.
	RangeOrThresholdDiscounts *struct {
		// Contains discounts based on a range or threshold that are added.
		AddedRangeOrThresholdDiscounts []RangeOrThresholdDiscountsType

		// Contains discounts based on a range or threshold that are removed.
		DeletedRangeOrThresholdDiscounts []RangeOrThresholdDiscountsType

		// Contains discounts based on a range or threshold that are modified.
		ChangedRangeOrThresholdDiscounts []struct {
			// Description of the change to the discounts based on a range or threshold.
			RangeOrThresholdDiscountChangeText XsString

			// The discounts based on a range or threshold after the changes were applied. The results.
			CurrentRangeOrThresholdDiscount RangeOrThresholdDiscountsType

			// The discounts based on a range or threshold before the changes were applied. The original.
			PreviousRangeOrThresholdDiscount RangeOrThresholdDiscountsType
		}
	}
}

// Ordering discount structure used in an award document.
type DiscountDetailType1 struct {
	// General discounts applicable to the award instrument.
	OtherDiscounts []OtherDiscountsType

	// Discounts based on a range or a threshold.
	RangeOrThresholdDiscounts []RangeOrThresholdDiscountsType
}

type DiscountGroupIdentifierType struct {
	// Discount group identifier.
	DiscountGroup *XsString

	// A specific delivery zone.
	DeliveryZone *XsString
}

// Used to define Step Ladder/ Incremental/ Grouping, Volume discounts. Should always be defined as repeatable element when used.
type DiscountRangeAndValueType struct {
	// Quantity based range or threshold.
	QuantityRange *QuantityUomRangeType

	// Amount based range or threshold.
	AmountRange *QtyAmountRangeType

	// The value of the discount
	DiscountValue DiscountValueType1
}

// Qualifier (with quantity), Value, UOM, Percent Basis
type DiscountValueType1 struct {
	// Description of the value to be applied. (see list)
	ValueDescription XsToken

	// Value. Express 4.25% as 4.25
	Value DecimalElement5OverZeroType

	// The unit of measure. (see Unit of Measure With Dollars list at dodprocurementtoolbox.com)
	UnitOfMeasure *XsString

	// When Value Description is "Percentage", the base against which the percentage is applied. (see list)
	PercentageBasis *XsToken
}

// Qualifier (without quantity), Value, Percent Basis with specific pick lists for Other Discounts
type DiscountValueType2 struct {
	// Description of the discount to be applied. (see list)
	ValueDescription XsToken

	// Discount value. Express 4.25% as 4.25.
	Value DecimalElement5OverZeroType

	// When Value Description is "Percentage", the base against which the percentage is applied. (see list)
	PercentageBasis *XsToken
}

type DistributionDetailsType struct {
	// Specify to whom the data item is to be sent.
	Addressee AddressDetailType

	// Details about the number and type of Contract Data Requirements List (CDRL) to be distributed.
	CopyDetails []struct {
		// Indicates whether an Original or draft copy is to be sent. (see list)
		TypeOfCopy XsToken

		// The number of copies to be distributed.
		NumberOfCopies XsPositiveInteger
	}

	// System Unique Identification to identify an automated information system to receive the data.
	SysUID *XsString

	// Contains relevant information that cannot be provided elsewhere.
	AdditionalInformation *XsString
}

// A generic type for quantity of time between 2 events measured in different units.
type DurationType struct {
	// Unit describing duration value. (see list)
	DurationUnit XsToken

	// Must be greater than zero.
	DurationValue XsPositiveInteger
}

type EstimatedQuantityType struct {
	// Quantity.
	QuantityValue DecimalElement5OverZeroType

	// The unit of measure. (see Unit of Measure With Dollars list at dodprocurementtoolbox.com)
	UnitOfMeasure XsString
}

type ExcessDeliveryActionType struct {
	// Amount a contractor cannot exceed. If exceeded, balance of the order will not be filled.
	CancelBalanceOrderExceedAmount *DecimalElement5OverZeroType

	// Amount a contractor cannot exceed. If exceeded, the entire order will be canceled.
	CancelEntireOrderAmount *DecimalElement5OverZeroType
}

type ExhibitLineItemType struct {
	// Enter the first (A-Z) or first two (AA-ZZ) characters of the exhibit line item. Do not use the letter I or O. (Block B)
	ElinBase ElinBaseType

	// The exhibit serial number. If the Elin Base is one character, then provide 3 characters: position 1 must be 0-9, positions 2 and 3 must be 0-9 and A-Z. If the Elin Base is two characters, then provide 2 characters (0-9 and A-Z). Do no use the letter I or O.
	ElinExtension ElinNumberType

	// The parent line item of the exhibit line item.
	ParentLineItem ParentClinType
}

// Line item type and numbering based on FAR.
type FARLineItemType struct {
	// The type of FAR line item. (see list)
	FARLineItemType XsToken

	// The first part of the line item. Must be alphanumeric.
	FARLineItemBase XsString

	// Extension added to the line item base. Must be alphanumeric.
	FARLineItemExtension *XsString
}

// Financial reference codes.
type FinancialReferenceType struct {
	// Type of financial reference. (see Financial Reference list at dodprocurementtoolbox.com)
	FinancialCodeDescription XsString

	// Financial reference code or number.
	FinancialCodeValue XsString
}

type FoBDetailsFINALType struct {
	// Information about who is paying transportation charges. (see list)
	PaymentMethod PaymentMethodType

	// Identifies the FoB point. (see list)
	FoBPoint *FoBPointType

	// When the FoB Point contains "Terminal", provide the 5 position United Nations code for ports and other locations (UN/LOCODE) in accordance with the United Nations Location Code Manual to identify the FoB Point.
	UnitedNationsCode *UnitedNationsCodeType
}

type FreeFormAddressType struct {
	// The first line of the address.
	AddressLine1 XsString

	// The second line of the address if needed.
	AddressLine2 *XsString

	// The third line of the address if needed.
	AddressLine3 *XsString

	// The forth line of the address if needed.
	AddressLine4 *XsString
}

type HazardousMaterialType struct {
	// The source of the value provided in Class Code. (see list)
	ClassCodeSource HAZMATClassCodeSourceType

	// The hazardous material code from the source provided in Class Code Source.
	ClassCode XsString
}

// Basic information for a procurement instrument.
type HeaderBasicInformationModificationType struct {
	// The type of response required upon receipt of an electronic copy of the draft procurement instrument (pre-signature). (see list)
	TransmissionAcknowledgement *TransmissionAcknowledgementType

	// The category of the procurement instrument. (see list)
	EffortCategory *EffortCategoryType

	// Reference line 16 of Synopsis in FAR 5.207.
	ContractDescription *XsString

	// The common name by which the procurement instrument is referenced.
	ProcurementInstrumentName *XsString

	// Denotes whether or not the procurement instrument is a contingency contract. (see list)
	ContingencyContract TrueFalseType

	// The purpose of the procurement instrument. (see list)
	DocumentPurpose DocumentPurposeType

	// Denotes whether or not the procurement instrument is an emergency action requiring expedited processing by the selling party. (see list)
	EmergencyRequestContract TrueFalseType

	// Text relating to the procurement instrument that cannot be captured as discrete elements.
	MiscellaneousTextDetails []MiscellaneousTextDetailsType

	// Competition in Contracting Act (CICA) authority for using other than full and open competition. (see Not Full and Open Competition list at dodprocurementtoolbox.com)
	NotFullOpenCompetition *XsString

	// Highest government security classification to the procurement instrument. (see list)
	AwardInstrumentSecurityLevel *Classification

	// Denotes special reporting requirements when needed. (see Special Reporting Requirement list at dodprocurementtoolbox.com)
	SpecialReportingRequirement []XsString

	// Provides parameters for orders on an indefinite delivery contract or other ordering instrument.
	OrderingInformation *OrderingInformationModificationType

	// Pricing arrangement type applicable to the procurement instrument. (FAR Part 16)
	PricingArrangement HeaderPricingArrangementType

	// The government and contractor share ratios.
	ShareRatio *ShareRatioModificationType

	// Miscellaneous information about solicitations and offers that pertain to the procurement instrument. May only be used when amending a solicitation procurement instrument.
	SolicitationOfferInformation *SolicitationOfferInformationModificationType

	// The schedule for definitizing a contract action. Multiple iterations are allowed only on conformed documents from Electronic Data Access (EDA).
	TargetDefinitizationSchedule *struct {
		// Contains the target definitization schedule that is added.
		AddedTargetDefinitizationSchedule *TargetDefinitizationScheduleType

		// Contains the target definitization schedule that is removed.
		DeletedTargetDefinitizationSchedule []TargetDefinitizationScheduleType

		// Used to record changes to the target definitization schedule.
		ChangedTargetDefinitizationSchedule []struct {
			// Description of the change to the target definitization schedule.
			TargetDefinitizationScheduleChangeText XsString

			// The target definitization schedule after the changes were applied. The results.
			CurrentTargetDefinitizationSchedule TargetDefinitizationScheduleType

			// The target definitization schedule before the changes were applied. The original.
			PreviousTargetDefinitizationSchedule TargetDefinitizationScheduleType
		}
	}
}

// Basic information for a procurement instrument.
type HeaderBasicInformationType struct {
	// The type of response required upon receipt of an electronic copy of the draft procurement instrument (pre-signature). (see list)
	TransmissionAcknowledgement *TransmissionAcknowledgementType

	// The category of the procurement instrument. (see list)
	EffortCategory *EffortCategoryType

	// Reference line 16 of Synopsis in FAR 5.207.
	ContractDescription *XsString

	// The common name by which the procurement instrument is referenced.
	ProcurementInstrumentName *XsString

	// Denotes whether or not the procurement instrument is a contingency contract. (see list)
	ContingencyContract TrueFalseType

	// The purpose of the procurement instrument. (see list)
	DocumentPurpose DocumentPurposeType

	// Denotes whether or not the procurement instrument is an emergency action requiring expedited processing by the selling party. (see list)
	EmergencyRequestContract TrueFalseType

	// Text relating to the procurement instrument that cannot be captured as discrete elements.
	MiscellaneousTextDetails []MiscellaneousTextDetailsType

	// Competition in Contracting Act (CICA) authority for using other than full and open competition. (see Not Full and Open Competition list at dodprocurementtoolbox.com)
	NotFullOpenCompetition *XsString

	// Highest government security classification to the procurement instrument. (see list)
	AwardInstrumentSecurityLevel *Classification

	// The number of copies to be returned to indicate acceptance of the order.
	SignedOrderCopies *XsPositiveInteger

	// Denotes special reporting requirements when needed. (see Special Reporting Requirement list at dodprocurementtoolbox.com)
	SpecialReportingRequirement []XsString

	// Provides parameters for orders on an indefinite delivery contract or other ordering instrument.
	OrderingInformation *OrderingInformationType

	// Pricing arrangement type applicable to the procurement instrument. (FAR Part 16)
	PricingArrangement HeaderPricingArrangementType

	// The government and contractor share ratios.
	ShareRatio *ShareRatioType

	// Miscellaneous information about solicitations and offers that pertain to the procurement instrument.
	SolicitationOfferInformation *SolicitationOfferInformationType

	// The schedule for definitizing a contract action. Multiple iterations are allowed only on conformed documents from Electronic Data Access (EDA).
	TargetDefinitizationSchedule []TargetDefinitizationScheduleType
}

type HeaderPricingArrangementType struct {
	// Pricing arrangement. (see list)
	PricingArrangementBase *PricingArrangementBaseType

	// Denotes whether or not there is an award fee.
	AwardFee *TrueType

	// Denotes whether or not there is a performance incentive. Cannot be true if any other value is provided. (see list)
	PerformanceIncentive []PerformanceIncentiveType

	// May be used when the represented document is a Blanket Purchase Agreement, Basic Ordering Agreement, Indefiinte Delivery Contract, or a Requirements Contract to denote that the Pricing Arrangement varies and is provided on the individual orders. (see list)
	OrderDependent *TrueType
}

type InstallmentType struct {
	// How often the payments occur. (see list)
	PaymentFrequency XsToken

	// The maximum number of payments.
	MaximumPayments *XsPositiveInteger

	// The amount of the recurring payment.
	RecurringPaymentAmount DecimalElement5OverZeroType

	// The beginning and end dates for the recurring payments.
	PaymentPeriod DateOnlyPeriodType
}

type ItemDeliveryLeadTimeScheduleType struct {
	// Delivery lead time information.
	ItemDeliveryLeadTime *DeliveryLeadTimeType1

	// Schedule delivery details.
	ItemDeliverySchedule []ItemDeliveryScheduleType

	// Reference numbers applicable to the delivery.
	DeliveryReference []CLINAccountingDetailType1

	// Identifies marks and numbers associated with a ship-to address.
	ShippingContainerMarks []ContainerMarksNumbers

	// Used to specify the marks to be placed on an item such as a tail number or a serial number.
	ItemMarks []ContainerMarksNumbers
}

type ItemDeliveryScheduleType struct {
	// The quantity and frequency of the delivery.
	QuantityToBeDelivered *QuantityType

	// The length of the delivery period.
	LengthOfDeliveryPeriod *DurationType

	// Number of shipments expected to complete the deliverable quantity.
	NumberOfExpectedShipments *XsPositiveInteger
}

type ItemObligatedAmountType struct {
	// Obligation amount.
	ObligatedAmount DecimalElement5OverZeroType

	// Commitment Identification Number. Unique number used to record and track a commitment in the accounting system.
	CIN []XsString

	// One or more codes or numbers referencing a funding line. Accounting Classification Reference Number (ACRN) must be provided.
	FinancialReferenceCode []FinancialReferenceType
}

type ItemOtherAmountsType struct {
	// Type of Amount (see Amount Description list at dodprocurementtoolbox.com)
	AmountDescription XsString

	// The amount value.
	Amount DecimalElement5ZeroPlusType

	// Percent increase in the target fee or target profit. Express 4.25% as 4.25
	TargetFeePercentIncrease *DecimalElement5OverZeroType

	// Percent decrease in the target fee or target profit. Express 4.25% as 4.25
	TargetFeePercentDecrease *DecimalElement5OverZeroType
}

// Partial delivery structure. Line item only.
type ItemPartialDeliveryType struct {
	// The quantity and units for a partial delivery.
	PartialDeliveryQuantity QuantityType

	// Dates, time, and period of a partial delivery.
	PartialDeliveryDates DeliveryDatesType
}

// Item packaging details.
type ItemPhysicalDetailsType struct {
	// The weight, volume and dimensions of a unit or intermediate pack.
	PackMeasurements *PackMeasurementsType

	// Unit and/or intermediate pack quantities.
	PackQuantities struct {
		// The number of pieces or supplier units in a unit pack.
		UnitPack *UnitPackType

		// The number of unit packs in an intermediate pack.
		IntermediatePackQuantity *PackingQuantityType
	}

	// States whether palletized loads or shrink wrap is required. (see list)
	PackingRequired *XsToken
}

type LaborRatesType struct {
	// High level category to which the labor rates apply. For example, "Professional Staff".
	Category XsString

	// Rates applied to a category or a sub-category.
	CategoryRate []struct {
		// The type of rate. For example, "Contractor's Site Rates".
		RateTitle XsString

		// The labor rate. Required on Award and Modification documents. Not allowed on Solicitation or Amendment documents.
		Rate *DecimalElement5OverZeroType

		// When applicable, a sub-category of Category. For example, "Level 2".
		SubCategory *XsString
	}
}

// A generic structure specifying a reference number.
type ItemReferenceNumberType struct {
	// Contains additional information when needed.
	DescriptionText *XsString

	// The item for which a reference number is being provided. (see Reference Description list at dodprocurementtoolbox.com)
	ReferenceDescription *XsString

	// Description of the reference number when not covered by one of the reference description options.
	AlternateDescription *XsString

	// The reference number which identifies the item.
	ReferenceValue *XsString

	// Provide one iteration for each referenced Purchase Request/MIPR and its corresponding Line item number. May only be provided at the line item level.
	PurchaseRequestDetails []struct {
		// The Purchase Requisition Number.
		PurchaseRequisitionNumber *XsString

		// The Military Interdepartmental Purchase Request (MIPR) Number
		MIPRNumber *XsString

		// The Purchase Request or Military Interdepartmental Purchase Request (MIPR) Line Item Number.
		PurchaseRequisitionLineItemNumber XsString
	}

	ProcurementInstrumentLocationGroup

	// The date that identifies the version of the item or document provided in Reference Value. Date in CCYY-MM-DD format.
	VersionDate *XsDate
}

type LimitsType struct {
	// The type of limit. (see list)
	LimitDescription LimitDescriptionType

	// Minimum limit
	Minimum *DecimalElement5OverZeroType

	// Maximum limit
	Maximum *DecimalElement5OverZeroType

	// The unit of measure. (see Unit of Measure With Dollars list at dodprocurementtoolbox.com)
	UnitOfMeasure *XsString

	// The textual name of the foreign currency the limit is provided in from ISO 4217 from the International Organization for Standardization. (see Currency list at dodprocurementtoolbox.com)
	ForeignCurrency *XsString
}

// Taxes, Obligated Amount with LOA, CIN, Total Line Amount, Percent increase, decrease in Target fee.
type LineItemAmountsType struct {
	// Currencies that apply to the line item.
	ItemCurrency *CurrencyDetailsType

	// Taxes that apply to the total line item amount.
	Taxes []TaxDetailType1

	// Obligated amount with reference to financial information.
	ItemObligatedAmount *ItemObligatedAmountType

	// Amounts other than the obligated amount. Must be provided if Multiple Line Items Information/ Group Other Amounts is not provided for this line item.
	ItemOtherAmounts []ItemOtherAmountsType

	// Amounts applicable to undefinitized contract actions that apply to the line. Multiple iterations are allowed only on lines being changed or deleted and on conformed documents from Electronic Data Access (EDA).
	UndefinitizedOtherAmounts []UndefinitizedOtherAmountsType
}

// Basic information structure for a line item.
type LineItemBasicInformationType struct {
	// Text relating to the line item that cannot be captured as discrete elements.
	MiscellaneousTextDetails []MiscellaneousTextDetailsType

	// Denotes whether or not the line item is an option line item. (see list)
	OptionLineItem TrueFalseType

	// Denotes special reporting requirements when needed. (see Special Reporting Requirement list at dodprocurementtoolbox.com)
	SpecialReportingRequirement []XsString

	// An identifier that is used to group line items together to relate information, such as amounts, on a specific undefinitized contract action. When used, there must be two or more lines with the same value. Only used when the individual procurement document is setting the line to undefinitzed. Multiple iterations are allowed only on conformed documents from Electronic Data Access (EDA).
	UndefinitizedIdentifier []XsString

	// Miscellaneous information about solicitations pertaining to the line item.
	LineItemSolicitationInformation *struct {
		// Solicitation conditions that are applicable to line items. (see list)
		LineItemSpecificCondition []XsToken

		// Dates that are relevant to a solicitation line item.
		LineItemSolicitationDates []struct {
			// Categorizes the date relevant to a solicitation line item. (see list)
			LineItemSolicitationDateDescription XsToken

			// A date (and time) relevant to the solicitation line item.
			LineItemSolicitationDate DateTimeType

			// If needed, contains additional information about the date on the solicitation.
			AdditionalInformation *XsString
		}

		// The details about the pricing being solicited.
		PricingDetails []struct {
			// Denotes one or more items that should be addressed when pricing.
			OtherPricing []struct {
				// The aspect to be priced. (see list)
				OtherPricingDescription XsToken

				// Indicates the delivery zone that a price is to be provided for. When Other Pricing Description is "Zone Price", either Delivery Zone or Shipping Postal Code is required; both may be provided.
				DeliveryZone []XsString

				// Denotes that the offeror is to provide the estimated number of hours associated with a labor rate. May only be provided if Other Pricing Description is Hourly Labor Rates. (see list)
				LaborRatesHoursEstimate *TrueType

				// Indicates the packing level that a price is to be provided for. May only be provided if Other Pricing Description is Packaging Price.
				PackingLevel []struct {
					// The container or material used for the packing. (see list)
					PackingContainer XsToken

					// To what level the container will be packed. May only be provided when Packing Container is "MILVAN", "SEAVAN", or "SDDC leased/controlled SEAVAN or MILVAN (SDDCVAN)". (see list)
					PackingCapacity *XsToken

					// Specifies who will pack the container. Not provided when Packing Capacity is "Empty". (see list)
					Packer *XsToken

					// Use when a second packer is expected. May only be provided when Packing Capacity is "Less Than Capacity"
					AdditionalPacking *struct {
						// To what level the container will be packed by the second packer. (see list)
						AdditionalPackingCapacity *XsToken

						// Specifies who will pack the container. (see list)
						AdditionalPacker *XsToken

						// Commingled with commercial cargo in accordance with the SDDC Container Agreement and Rate Guide. Only used when Packer is "Ocean Carrier". (see list)
						CommingledPacking *TrueType
					}
				}

				// Indicates the packaging protection level (preservation) that a price is to be provided for. May only be provided if Other Pricing Description is Packaging Protection Level (Preservation) Price.
				ProtectionLevel *struct {
					// Method and sub-method of preservation (MIL-STD-2073-1D, appendix J). (see list)
					PreservationMethod XsToken

					// Specialized preservation codes (MIL_STD_2073-1D J.4.2.1).
					SpecialPreservationCode []XsToken

					// Supplementary or Special Requirements. (MIL_STD_2073-1D J.1.4.c)
					SupplementaryOrSpecialRequirements *XsString
				}

				// The general shipping area for quoting purposes. When Other Pricing Description is "Zone Price", either Delivery Zone or Shipping Postal Code is required; both may be provided.
				ShippingPostalCode []PostalCodeType
			}

			// Denotes the quantity ranges when prices are being solicited for step ladder pricing.
			QuantityRangePricing *struct {
				// The quantity range for which a price is being solicited.
				QuantityRange []QtyAmountRangeType

				// The unit of measure of the quantity range. (see Unit of Measure Without Dollars list at dodprocurementtoolbox.com)
				UnitOfMeasure XsString
			}
		}

		// Provides set aside percentage and organization type. If not provided, the solicitation is unrestricted.
		SetAsideDetails *SetAsideDetailsType
	}

	// Ordering information pertinent to the line item.
	OrderingInformation *struct {
		// The estimated total quantity to be ordered. The actual order quantity may be higher or lower.
		EstimatedQuantity *EstimatedQuantityType

		// Ordering limits on the line item.
		Limits []LimitsType

		// Permitted variation in quantity.
		OrderVariation *OrderVariationType
	}

	// Pricing arrangement type applicable to the line item. (FAR Part 16)
	PricingArrangement *PricingArrangementType

	// Details of the product or services ordered.
	ProductServicesOrdered ProductServiceQuantityType
}

// Date structure for a line item.
type LineItemDatesType struct {
	// Description of the date. (see list)
	LineItemDateDescription XsToken

	// A specific date (and time if needed).
	LineItemDate *DateTimeType

	// Date in CCYY-MM format.
	LineItemMonth *XsGYearMonth

	// Denotes a range of dates.
	LineItemPeriod *DatePeriodType
}

// Top Level Line Item Details
type LineItemDetailType struct {
	// Number of the line item.
	LineItemIdentifier LineItemIdentifierType

	// Miscellaneous information about the line item.
	LineItemBasicInformation LineItemBasicInformationType

	// Addresses applicable to the line item.
	Addresses []AddressDetailType

	// Attachments applicable to the line item.
	Attachments []AttachmentType

	// Line item deliveries and ship-to information.
	Delivery []struct {
		// Action to be taken when the maximum total order amount is exceeded by the contractor.
		ExcessDeliveryAction *ExcessDeliveryActionType

		// Date or date ranges that relate to a delivery.
		ItemDeliveryDates []DeliveryDatesType

		// Information on deliveries that require a lead time.
		ItemSchedule []ItemDeliveryLeadTimeScheduleType

		// Special handling and hazardous material details.
		ItemSpecialHandling []DeliverySpecialHandlingHazmatType

		// Partial delivery details.
		PartialDeliverySchedule []ItemPartialDeliveryType

		// Indicates consignee or a shipping contact must be notified to schedule a delivery.
		PreDeliveryNotification *TrueFalseType

		// Address where the delivery will be made. One iteration where Address Description is 'Service Performance Site', 'Ship To', 'Shipment in Place Location', or 'Place of Performance' must be provided. A second iteration where Address Description is 'Mark for Party' may be provided. Must be provided on an award or modification when the line item is not an option line item.
		ShipToAddress []AddressDetailType

		// Transportation information
		TransportationDetails *RoutingTransitType
	}

	// Discounts applicable to the line item.
	Discounts *DiscountDetailType1

	// Clause or provision information that applies to the line item.
	LineItemClauses []ClauseDetailsType

	// Amounts and pricing that impact the line item. Do not provide on a Solicitation.
	LineItemAmounts *LineItemAmountsType

	// Dates applicable to the line item that are not related to a delivery.
	LineItemDates []LineItemDatesType

	// Physical quantities with relation to a pack.
	PackPhysicalDetails []ItemPhysicalDetailsType

	// Line item pricing information.
	PriceDetails *UnitPriceType1

	// Recurring payments of a fixed amount that occur on a specified schedule such as rent.
	RecurringPayments *InstallmentType

	// Use to provide numbers referencing documents (MIPR, SOW, GBL, Requisition etc.). Numbers (FMS Case, Package, Drawing etc.), Codes (SFC, Project, Weapon System, etc.) and other Reference Values.
	ReferenceNumber []ItemReferenceNumberType

	// Uniform Contract Format (UCF) Section C. Any description or specifications needed in addition to UCF Section B. (This carries statements of objectives, performance work statements, statements of work and similar text descriptions when not separated in an attachment. When such documents are attachments, this cites the portions relevant to the cited line item. Specific numbered specifications, standards, and other standardized descriptive data is handled separately under Product or Service Identifiers and Reference Numbers)
	RequirementsDescription *XsString

	// Services, Allowances and Charges.
	ServiceAllowanceCharges []ServiceAllowanceChargeType

	// Information pertaining to shipments.
	Shipping *ShippingType

	// Details on telecommunication rates.
	TelecommunicationRates []struct {
		// Brief description about what the rate applies to. For example, MES to Cellular Networks, SMS Messaging, etc.
		RateDescription XsString

		// The rate amount.
		Rate DecimalElement5OverZeroType

		// The unit of measure to which the rate applies such as second, messages, etc. (see Unit of Measure Without Dollars list at dodprocurementtoolbox.com)
		RateUnitOfMeasure XsString
	}

	// Wage determination information.
	WageDeterminationDetails *WageDeterminationType
}

// Line item type and numbering.
type LineItemIdentifierType struct {
	// Line item number as defined in the Department of Defense Federal Acquisition Regulation Supplement (DFARS).
	DFARS *DFARSLineItemType

	// Line item number as defined in the Federal Acquisition Regulation (FAR).
	FAR *FARLineItemType
}

type LineItemListChangeType struct {
	// Description of the change to the line item list.
	LineItemListChangeText XsString

	// The line item list after the changes were applied. The results.
	CurrentLineItemList []LineItemIdentifierType

	// The line item list before the changes were applied. The original.
	PreviousLineItemList []LineItemIdentifierType
}

type LineItemsType struct {
	// The type of line item. (see list)
	LineItemType XsToken

	// The first four numbers of the line item. (Range 0001 to 9999)
	LineItemBase LineItemBaseType

	// Extension added to the line item base.
	LineItemExtension *struct {
		// Two digit extension denoting an information sub line item. (Range 01-99)
		InfoSlinExtension *XsString

		// Two character extension denoting a sub line item. (Range AA-ZZ, except letters I or O).
		SlinExtension *SlinExtensionType
	}
}

type LoaCodeType struct {
	// Component description. (see LOA Component list at dodprocurementtoolbox.com)
	ComponentTitle XsString

	// The value of the component listed in Component Title.
	ComponentValue XsString
}

// Without originating organization as a separate element.
type LoaDetailsType struct {
}

// The longitude and latitude coordinates of a location.
type LocationCoordinatesType struct {
	// The location North or South of the Equator.
	Latitude DecimalElementCoordinateType

	// The location East or West of the Prime Meridian.
	Longitude DecimalElementCoordinateType
}

// Identifies the label that should be contained with the mark
type MarkLabelType struct {
	// The text of the mark.
	MarkValue XsString

	// When provided, this is the label that identifies the marking and is part of the marking. For example, "Serial Number:", "Manufacturer Part Number -", etc.
	MarkLabel *XsString
}

type MarkRangeType struct {
	// Starting number of the sequential range
	RangeStart XsString

	// Ending number of the sequential range
	RangeEnd XsString

	// When provided, this is the label that identifies the marking and is part of the marking. For example, "Serial Number:", "Manufacturer Part Number -", etc.
	MarkLabel *XsString
}

// Free form text and the UCF section it belongs to.
type MiscellaneousTextDetailsType struct {
	// Text associated with a particular section from the Federal Uniform Contract Format (UCF) or CSI Division or Section.
	MiscellaneousText *XsString

	// Text associated with a particular section from the Federal Uniform Contract Format (UCF) or CSI Division or Section with html tags. Contents must be enclosed with CDATA.
	FormattedMiscellaneousText *XsString

	ProcurementInstrumentLocationGroup
}

// Miscellaneous text used in an award modification or solicitation amendment document.
type MiscellaneousTextModificationType struct {
	// Contains the miscellaneous text for a section that is added.
	AddedMiscellaneousText []MiscellaneousTextDetailsType

	// Contains the miscellaneous text for a section that is removed.
	DeletedMiscellaneousText []MiscellaneousTextDetailsType

	// Contains the miscellaneous text for a section that is modified.
	ChangedMiscellaneousText []struct {
		// Description of the change to the miscellaneous text.
		MiscellaneousTextChangeText XsString

		// The miscellaneous text after the changes were applied. The results.
		CurrentMiscellaneousText MiscellaneousTextDetailsType

		// The miscellaneous text before the changes were applied. The original.
		PreviousMiscellaneousText MiscellaneousTextDetailsType
	}
}

type ModifiedDatesHeaderOnlyType struct {
	// Records changes to the effective date of the procurement instrument being modified. Date in CCYY-MM-DD format. May not be provided on an amendment.
	ProcurementInstrumentEffectiveDate *XsDate

	// Records changes to a period of time applicable to the procurement instrument being modified.
	ProcurementInstrumentPeriods []DatePeriodDescriptionType
}

type MultipleLineItemsInformationModificationType struct {
	// Changes to addresses that apply to a group of procurement instrument line items. Include changes to the group of contract line items.
	GroupAddresses []struct {
		// Unique identifier that is used to reference the information group.
		GroupIdentifier GroupIdentifierType

		// Overall description of the changes.
		GroupAddressChangeText *XsString

		// Denotes the Group Identifier and its associated information is being added.
		GroupIdentifierAdd *struct {
			// The line item list.
			LineItemList []LineItemIdentifierType

			// The addresses in the group.
			ItemAddresses []AddressDetailType
		}

		// Denotes the Group Identifier and all associated information is being deleted.
		GroupIdentifierDelete *struct {
			// The line item list of the group that is being deleted.
			PreviousLineItemList []LineItemIdentifierType

			// All addresses in the group that is being deleted.
			PreviousItemAddresses []AddressDetailType
		}

		// Denotes the information associated with the Group Identifier is being modified.
		GroupIdentifierModify *struct {
			// Records changes to group's line items list.
			LineItemListChange *LineItemListChangeType

			// Records addresses that have been added to, removed from, or modified in the group.
			AddressModification *struct {
				// Contains addresses that are added to the group.
				AddedAddresses []AddressDetailType

				// Contains addresses that are removed from the group.
				DeletedAddresses []AddressDetailType

				// Contains addresses in the group that are modified.
				ChangedAddresses []AddressGroupModificationType
			}
		}
	}

	// Changes to clauses that apply to a group of contract line items. Include changes to the group of procurement instrument line items.
	GroupClauses []struct {
		// Unique identifier that is used to reference the information group.
		GroupIdentifier GroupIdentifierType

		// Overall description of the changes.
		GroupClauseChangeText *XsString

		// Denotes the Group Identifier and its associated information is being added.
		GroupIdentifierAdd *struct {
			// The line item list.
			LineItemList []LineItemIdentifierType

			// The details about a clause.
			ItemClauses []ClauseDetailsType
		}

		// Denotes the Group Identifier and all associated information is being deleted.
		GroupIdentifierDelete *struct {
			// The line item list being deleted.
			PreviousLineItemList []LineItemIdentifierType

			// The clauses being deleted.
			PreviousItemClauses []ClauseDetailsType
		}

		// Denotes the information associated with the Group Identifier is being modified.
		GroupIdentifierModify *struct {
			// Records changes to the line items list.
			LineItemListChange *LineItemListChangeType

			// Records clauses that have been added to, removed from, or modified in the group.
			ClauseModification *ClauseModificationType
		}
	}

	// Changes to discounts that apply to a group of procurement instrument line items.
	GroupDiscounts []struct {
		// Unique identifier that is used to reference the information group.
		GroupIdentifier GroupIdentifierType

		// Overall description of the changes.
		GroupDiscountsChangeText *XsString

		// Denotes the Group Identifier and its associated information is being added.
		GroupIdentifierAdd *struct {
			// The line item list.
			LineItemList []LineItemIdentifierType

			// General discount details.
			OtherDiscounts []OtherDiscountsType

			// Details of discounts based on a range or threshold.
			RangeOrThresholdDiscounts []RangeOrThresholdDiscountsType
		}

		// Denotes the Group Identifier and all associated information is being deleted.
		GroupIdentifierDelete *struct {
			// The line item list being deleted.
			PreviousLineItemList []LineItemIdentifierType

			// General discounts being deleted.
			PreviousOtherDiscounts []OtherDiscountsType

			// Discounts based on a range or threshold being deleted.
			PreviousRangeOrThresholdDiscounts []RangeOrThresholdDiscountsType
		}

		// Denotes the information associated with the Group Identifier is being modified.
		GroupIdentifierModify *struct {
			// Records changes to the line items list.
			LineItemListChange *LineItemListChangeType

			// Discounts that have been added to, removed from, or modified in the group.
			ItemDiscountsModification *DiscountDetailModificationType1
		}
	}

	// Changes to labor rates that apply to a group of procurement instrument line items.
	GroupLaborRates []struct {
		// Unique identifier that is used to reference the information group.
		GroupIdentifier GroupIdentifierType

		// Overall description of the changes.
		GroupLaborRatesChangeText *XsString

		// Denotes the Group Identifier and its associated information is being added.
		GroupIdentifierAdd *struct {
			// The line item list.
			LineItemList []LineItemIdentifierType

			// The labor rate details.
			LaborRates []LaborRatesType
		}

		// Denotes the Group Identifier and all associated information is being deleted.
		GroupIdentifierDelete *struct {
			// The line item list being deleted.
			PreviousLineItemList []LineItemIdentifierType

			// Labor rates being deleted.
			PreviousLaborRates []LaborRatesType
		}

		// Denotes the information associated with the Group Identifier is being modified.
		GroupIdentifierModify *struct {
			// Records changes to the line items list.
			LineItemListChange *LineItemListChangeType

			// Labor rates that have been added to, removed from, or modified in the group.
			LaborRatesModification *struct {
				// Contains labor rates that are added.
				AddedLaborRates []LaborRatesType

				// Contains labor rates that are removed.
				DeletedLaborRates []LaborRatesType

				// Contains labor rates that are modified.
				ChangedLaborRates []struct {
					// Description of the change to the labor rates.
					LaborRateChangeText XsString

					// The labor rates after the changes were applied. The results.
					CurrentLaborRates LaborRatesType

					// The labor rates before the changes were applied. The original.
					PreviousLaborRates LaborRatesType
				}
			}
		}
	}

	// Changes to miscellaneous text that applies to a group of procurement instrument line items.
	GroupMiscellaneousText []struct {
		// Unique identifier that is used to reference the information group.
		GroupIdentifier GroupIdentifierType

		// Overall description of the changes.
		GroupMiscellaneousTextChangeText *XsString

		// Denotes the Group Identifier and its associated information is being added.
		GroupIdentifierAdd *struct {
			// The line item list.
			LineItemList []LineItemIdentifierType

			// The miscellaneous text details.
			AddedMiscellaneousText []MiscellaneousTextDetailsType
		}

		// Denotes the Group Identifier and all associated information is being deleted.
		GroupIdentifierDelete *struct {
			// The line item list being deleted.
			PreviousLineItemList []LineItemIdentifierType

			// The miscellaneous text being deleted.
			PreviousMiscellaneousText []MiscellaneousTextDetailsType
		}

		// Denotes the information associated with the Group Identifier is being modified.
		GroupIdentifierModify *struct {
			// Records changes to the line items list.
			LineItemListChange *LineItemListChangeType

			// Miscellaneous Text that has been added to, removed from, or modified in the group.
			MiscellaneousTextModification *MiscellaneousTextModificationType
		}
	}

	// Changes to amounts other than obligated amounts that apply to a group of procurement instrument line items.
	GroupOtherAmounts []struct {
		// Unique identifier that is used to reference the information group.
		GroupIdentifier GroupIdentifierType

		// Overall description of the changes.
		GroupOtherAmountsChangeText *XsString

		// Denotes the Group Identifier and its associated information is being added.
		GroupIdentifierAdd *struct {
			// The line item list.
			LineItemList []LineItemIdentifierType

			// Other Amount details.
			AddedOtherAmounts []ItemOtherAmountsType
		}

		// Denotes the Group Identifier and all associated information is being deleted.
		GroupIdentifierDelete *struct {
			// The line item list being deleted.
			PreviousLineItemList []LineItemIdentifierType

			// The Other Amounts being deleted.
			PreviousOtherAmounts []ItemOtherAmountsType
		}

		// Denotes the information associated with the Group Identifier is being modified.
		GroupIdentifierModify *struct {
			// Records changes to the line items list.
			LineItemListChange *LineItemListChangeType

			// Records the other amounts that has been added, removed, or modified.
			OtherAmountsModification []ItemOtherAmountsType
		}
	}

	// Changes to the replacement price that apply to a group of procurement instrument line items.
	GroupReplacementPrice []struct {
		// Unique identifier that is used to reference the information group.
		GroupIdentifier GroupIdentifierType

		// Overall description of the changes.
		GroupReplacementPriceChangeText *XsString

		// Denotes the Group Identifier and its associated information is being added.
		GroupIdentifierAdd *struct {
			// The line item list.
			LineItemList []LineItemIdentifierType

			// Contains the replacement price that is added.
			AddedReplacementPrice ReplacementPriceType
		}

		// Denotes the Group Identifier and all associated information is being deleted.
		GroupIdentifierDelete *struct {
			// The line item list being deleted.
			PreviousLineItemList []LineItemIdentifierType

			// Contains the replacement price that is removed.
			PreviousReplacementPrice ReplacementPriceType
		}

		// Denotes the information associated with the Group Identifier is being modified.
		GroupIdentifierModify *struct {
			// Records changes to the line items list.
			LineItemListChange *LineItemListChangeType

			// Contains the replacement price that is modified.
			ReplacementPriceModification *struct {
				// Description of the change to the replacement price.
				ReplacementPriceChangeText XsString

				// The replacement price after the changes were applied. The results.
				CurrentReplacementPrice ReplacementPriceType

				// The replacement price before the changes were applied. The original.
				PreviousReplacementPrice ReplacementPriceType
			}
		}
	}

	// Changes to Requirements Descriptions that apply to a group of procurement instrument line items. Uniform Contract Format (UCF) Section C. Any description or specifications needed in addition to UCF Section B. (This carries statements of objectives, performance work statements, statements of work and similar text descriptions when not separated in an attachment. Specific numbered specifications, standards, and other standardized descriptive data is handled separately under Product or Service Identifiers and Reference Numbers)
	GroupRequirementsDescription []struct {
		// Unique identifier that is used to reference the information group.
		GroupIdentifier GroupIdentifierType

		// Overall description of the changes.
		GroupRequirementsDescriptionChangeText *XsString

		// Denotes the Group Identifier and its associated information is being added.
		GroupIdentifierAdd *struct {
			// The line item list.
			LineItemList []LineItemIdentifierType

			// Contains the requirements description that is added.
			AddedRequirementsDescription XsString
		}

		// Denotes the Group Identifier and all associated information is being deleted.
		GroupIdentifierDelete *struct {
			// The line item list being deleted.
			PreviousLineItemList []LineItemIdentifierType

			// Contains the requirements description that is removed.
			PreviousRequirementsDescription XsString
		}

		// Denotes the information associated with the Group Identifier is being modified.
		GroupIdentifierModify *struct {
			// Records changes to the line items list.
			LineItemListChange *LineItemListChangeType

			// Contains the requirements description that is modified.
			RequirementsDescriptionModification *struct {
				// Description of the change to the requirements description.
				RequirementsDescriptionChangeText XsString

				// The requirements description after the changes were applied. The results.
				CurrentRequirementsDescription XsString

				// The requirements description before the changes were applied. The original.
				PreviousRequirementsDescription XsString
			}
		}
	}

	// Changes to the share ratio that applies to a group of procurement instrument line items.
	GroupShareRatio []struct {
		// Unique identifier that is used to reference the information group.
		GroupIdentifier GroupIdentifierType

		// Overall description of the changes.
		GroupShareRatioChangeText *XsString

		// Denotes the Group Identifier and its associated information is being added.
		GroupIdentifierAdd *struct {
			// The line item list.
			LineItemList []LineItemIdentifierType

			// The Share Ratio being added.
			AddedShareRatio ShareRatioType
		}

		// Denotes the Group Identifier and all associated information is being deleted.
		GroupIdentifierDelete *struct {
			// The line item list being deleted.
			PreviousLineItemList []LineItemIdentifierType

			// The Share Ration being deleted.
			PreviousShareRatio ShareRatioType
		}

		// Denotes the information associated with the Group Identifier is being modified.
		GroupIdentifierModify *struct {
			// Records changes to the line items list.
			LineItemListChange *LineItemListChangeType

			// Contains the share ratio that is modified.
			ItemShareRatioModification *struct {
				// Description of the change to the share ratio.
				ShareRatioChangeText XsString

				// The share ratio after the changes were applied. The results.
				CurrentShareRatio ShareRatioType

				// The share ratio before the changes were applied. The original.
				PreviousShareRatio ShareRatioType
			}
		}
	}

	// Changes to the special pricing that apply to a group of procurement instrument line items.
	GroupSpecialPricing []struct {
		// Unique identifier that is used to reference the information group.
		GroupIdentifier GroupIdentifierType

		// Overall description of the changes.
		GroupSpecialPricingChangeText *XsString

		// Denotes the Group Identifier and its associated information is being added.
		GroupIdentifierAdd *struct {
			// The line item list.
			LineItemList []LineItemIdentifierType

			// The Special Pricing being added.
			AddedSpecialPricing SpecialPricingType
		}

		// Denotes the Group Identifier and all associated information is being deleted.
		GroupIdentifierDelete *struct {
			// The line item list being deleted.
			PreviousLineItemList []LineItemIdentifierType

			// The Special Pricing that is removed.
			PreviousSpecialPricing SpecialPricingType
		}

		// Denotes the information associated with the Group Identifier is being modified.
		GroupIdentifierModify *struct {
			// Records changes to the line items list.
			LineItemListChange *LineItemListChangeType

			// Contains the special pricing that is modified.
			SpecialPricingModification *struct {
				// Description of the change to the special pricing.
				SpecialPricingChangeText XsString

				// The special pricing after the changes were applied. The results.
				CurrentSpecialPricing SpecialPricingType

				// The special pricing before the changes were applied. The original.
				PreviousSpecialPricing SpecialPricingType
			}
		}
	}

	// Changes to undefinitized Identifiers that applies to a group of procurement instrument line items.
	GroupUndefinitizedIdentifier []struct {
		// Undefinitized Identifier that is being added, deleted, or whose line item list is being modified.
		UndefinitizedIdentifier XsString

		// Overall description of the changes.
		GroupUndefinitizedIdentifierChangeText *XsString

		// Denotes the undefinitized identifier is being added to the list of provided line items.
		UndefinitizedIdentifierAdd []LineItemIdentifierType

		// Denotes the undefinitized identifier is being deleted along with its associated line item list.
		UndefinitizedIdentifierDelete []LineItemIdentifierType

		// Changes to the line item list associated with the undefinitized identifier.
		UndefinitizedIdentifierModify *LineItemListChangeType
	}

	// Changes to variable pricing that applies to a group of procurement instrument line items.
	GroupVariablePricing []struct {
		// Unique identifier that is used to reference the information group.
		GroupIdentifier GroupIdentifierType

		// Overall description of the changes.
		GroupVariablePricingChangeText *XsString

		// Denotes the Group Identifier and its associated information is being added.
		GroupIdentifierAdd *struct {
			// The line item list.
			LineItemList []LineItemIdentifierType

			// The quantity ranges and prices being added.
			AddedVariablePricing VariablePricingType
		}

		// Denotes the Group Identifier and all associated information is being deleted.
		GroupIdentifierDelete *struct {
			// The line item list being deleted.
			PreviousLineItemList []LineItemIdentifierType

			// The Variable Pricing that is removed.
			PreviousVariablePricing VariablePricingType
		}

		// Denotes the information associated with the Group Identifier is being modified.
		GroupIdentifierModify *struct {
			// Records changes to the line items list.
			LineItemListChange *LineItemListChangeType

			// Contains the variable pricing that is modified.
			VariablePricingModification *struct {
				// Description of the change to the variable pricing.
				VariablePricingChangeText XsString

				// The variable pricing after the changes were applied. The results.
				CurrentVariablePricing VariablePricingType

				// The variable pricing before the changes were applied. The original.
				PreviousVariablePricing VariablePricingType
			}
		}
	}

	// Changes to the zone pricing that apply to a group of procurement instrument line items.
	GroupZonePricing []struct {
		// Unique identifier that is used to reference the information group.
		GroupIdentifier GroupIdentifierType

		// Overall description of the changes.
		GroupZonePricingChangeText *XsString

		// Denotes the Group Identifier and its associated information is being added.
		GroupIdentifierAdd *struct {
			// The line item list.
			LineItemList []LineItemIdentifierType

			// Contains the zone pricing that is added.
			AddedZonePricing ZonePricingType
		}

		// Denotes the Group Identifier and all associated information is being deleted.
		GroupIdentifierDelete *struct {
			// The line item list being deleted.
			PreviousLineItemList []LineItemIdentifierType

			// Contains the zone pricing that is removed.
			PreviousZonePricing ZonePricingType
		}

		// Denotes the information associated with the Group Identifier is being modified.
		GroupIdentifierModify *struct {
			// Records changes to the line items list.
			LineItemListChange *LineItemListChangeType

			// Contains the zone pricing that is modified.
			ZonePricingModification *struct {
				// Description of the change to the zone pricing.
				ZonePricingChangeText XsString

				// The zone pricing after the changes were applied. The results.
				CurrentZonePricing ZonePricingType

				// The zone pricing before the changes were applied. The original.
				PreviousZonePricing ZonePricingType
			}
		}
	}

	// Changes to wage determination that apply to a group of procurement instrument line items.
	GroupWageDetermination []struct {
		// Unique identifier that is used to reference the information group.
		GroupIdentifier GroupIdentifierType

		// Overall description of the changes.
		GroupWageDeterminationChangeText *XsString

		// Denotes the Group Identifier and its associated information is being added.
		GroupIdentifierAdd *struct {
			// The line item list.
			LineItemList []LineItemIdentifierType

			// Contains the wage determination that is added.
			AddedWageDetermination WageDeterminationType
		}

		// Denotes the Group Identifier and all associated information is being deleted.
		GroupIdentifierDelete *struct {
			// The line item list being deleted.
			PreviousLineItemList []LineItemIdentifierType

			// Contains the wage determination that is deleted.
			PreviousWageDetermination WageDeterminationType
		}

		// Denotes the information associated with the Group Identifier is being modified.
		GroupIdentifierModify *struct {
			// Records changes to the line items list.
			LineItemListChange *LineItemListChangeType

			// Contains the Wage Determination that is modified.
			WageDeterminationModification *WageDeterminationModificationType
		}
	}
}

type MultipleLineItemsInformationType struct {
	// Addresses that apply to a group of procurement instrument line items.
	GroupAddresses []struct {
		// Unique identifier that is used to reference the grouping.
		GroupIdentifier GroupIdentifierType

		// A list of two or more procurement instrument line items.
		LineItemList []LineItemIdentifierType

		// Addresses applicable to the line item grouping.
		ItemAddresses []AddressDetailType
	}

	// One or more clauses that apply to a group of procurement instrument items.
	GroupClauses []struct {
		// Unique identifier that is used to reference the grouping.
		GroupIdentifier GroupIdentifierType

		// A list of two or more procurement instrument line items.
		LineItemList []LineItemIdentifierType

		// The details about a clause.
		ItemClauses []ClauseDetailsType
	}

	// A discount that applies to a group of procurement instrument line items.
	GroupDiscounts []struct {
		// Unique identifier that is used to reference the grouping.
		GroupIdentifier GroupIdentifierType

		// A list of two or more procurement instrument line items.
		LineItemList []LineItemIdentifierType

		// The details about the discount.
		ItemDiscounts DiscountDetailType1
	}

	// Labor rates that apply to a group of procurement instrument line items.
	GroupLaborRates []struct {
		// Unique identifier that is used to reference the grouping.
		GroupIdentifier GroupIdentifierType

		// A list of two or more procurement instrument line items.
		LineItemList []LineItemIdentifierType

		LaborRates []LaborRatesType
	}

	// Miscellaneous text that applies to a group of procurement instrument line items.
	GroupMiscellaneousText []struct {
		// Unique identifier that is used to reference the grouping.
		GroupIdentifier GroupIdentifierType

		// A list of two or more procurement instrument line items.
		LineItemList []LineItemIdentifierType

		// Text relating to the procurement instrument that cannot be captured as discrete elements.
		MiscellaneousTextDetails []MiscellaneousTextDetailsType
	}

	// Amounts other than obligated amounts that apply to a group of procurement instrument line items.
	GroupOtherAmounts []struct {
		// Unique identifier that is used to reference the grouping.
		GroupIdentifier GroupIdentifierType

		// A list of two or more procurement instrument line items.
		LineItemList []LineItemIdentifierType

		ItemOtherAmounts []ItemOtherAmountsType
	}

	// Replacement price that applies to a group of procurement instrument line items.
	GroupReplacementPrice []struct {
		// Unique identifier that is used to reference the grouping.
		GroupIdentifier GroupIdentifierType

		// A list of two or more procurement instrument line items.
		LineItemList []LineItemIdentifierType

		ReplacementPrice ReplacementPriceType
	}

	// Requirements description that applies to a group of procurement instrument line items.
	GroupRequirementsDescription []struct {
		// Unique identifier that is used to reference the grouping.
		GroupIdentifier GroupIdentifierType

		// A list of two or more contract line items.
		LineItemList []LineItemIdentifierType

		// Uniform Contract Format (UCF) Section C. Any description or specifications needed in addition to UCF Section B. (This carries statements of objectives, performance work statements, statements of work and similar text descriptions when not separated in an attachment. Specific numbered specifications, standards, and other standardized descriptive data is handled separately under Product or Service Identifiers and Reference Numbers)
		RequirementsDescription XsString
	}

	// Share ratio that applies to a group of procurement instrument line items.
	GroupShareRatio []struct {
		// Unique identifier that is used to reference the grouping.
		GroupIdentifier GroupIdentifierType

		// A list of two or more procurement instrument line items.
		LineItemList []LineItemIdentifierType

		ShareRatio ShareRatioType
	}

	// Special pricing that applies to a group of procurement instrument line items.
	GroupSpecialPricing []struct {
		// Unique identifier that is used to reference the grouping.
		GroupIdentifier GroupIdentifierType

		// A list of two or more procurement instrument line items.
		LineItemList []LineItemIdentifierType

		SpecialPricing SpecialPricingType
	}

	// Undefinitized Identifier denotiing an undefinitized contract action that applies to a group of procurement instrument line items. Multiple iterations are allowed only on conformed documents from Electronic Data Access (EDA).
	GroupUndefinitizedIdentifier []struct {
		// A list of two or more procurement instrument line items.
		LineItemList []LineItemIdentifierType

		// Identifies a specific undefinitized contract action (UCA).
		UndefinitizedIdentifier XsString
	}

	// Variable pricing that applies to a group of procurement instrument line items.
	GroupVariablePricing []struct {
		// Unique identifier that is used to reference the grouping.
		GroupIdentifier GroupIdentifierType

		// A list of two or more procurement instrument line items.
		LineItemList []LineItemIdentifierType

		// The details about the variable pricing.
		ItemVariableRangePricing VariablePricingType
	}

	// Zone pricing that applies to a group of procurement instrument line items.
	GroupZonePricing []struct {
		// Unique identifier that is used to reference the grouping.
		GroupIdentifier GroupIdentifierType

		// A list of two or more procurement instrument line items.
		LineItemList []LineItemIdentifierType

		ZonePricing ZonePricingType
	}

	// Wage determination that applies to a group of procurement instrument line items.
	GroupWageDetermination []struct {
		// Unique identifier that is used to reference the grouping.
		GroupIdentifier GroupIdentifierType

		// A list of two or more procurement instrument line items.
		LineItemList []LineItemIdentifierType

		WageDetermination WageDeterminationType
	}
}

type OrderingInformationModificationType struct {
	// The estimated total quantity to be ordered. The actual order quantity may be higher or lower.
	EstimatedQuantity *EstimatedQuantityType

	// Used to indicate ordering limits on the procurement instrument.
	Limits []LimitsType

	// Specifies which entities are allowed to place orders against the procurement instrument.
	OrderingCapability *struct {
		// Orders can be placed by any entity within the United States Government.
		UnitedStatesGovernment *TrueFalseType

		// Orders may be placed by the specified DoD Agencies. (see list)
		DoDMultiAgency []DoDMultiAgencyType

		// Orders can be placed by any entity within the United States Department of Defense.
		DoDAgencyWide *TrueFalseType

		// Orders may be placed by specific entities only.
		SpecificEntities *TrueFalseType
	}

	// Permitted variations in quantity.
	OrderVariation *OrderVariationModificationType

	// Response Time in number of days within which the contractor must reject an order exceeding the maximum order limits.
	ResponseDaysToRejectOrder *XsPositiveInteger
}

type OrderVariationModificationType struct {
	// Variation expressed as a discrete quantity.
	Quantity *struct {
		// The quantity by which the order can be below the expected quantity.
		QuantityUnder *DecimalElement5OverZeroType

		// The quantity by which the order can be above the expected quantity.
		QuantityOver *DecimalElement5OverZeroType

		// The unit of measure. (see Unit of Measure With Dollars list at dodprocurementtoolbox.com)
		UnitOfMeasure XsString
	}

	// Variation expressed as a percentage.
	Percentage *struct {
		// Express 4.25% as 4.25
		PercentUnder *DecimalElement5Type

		// Express 4.25% as 4.25
		PercentOver *DecimalElement5Type
	}
}

type OrderingInformationType struct {
	// The estimated total quantity to be ordered. The actual order quantity may be higher or lower.
	EstimatedQuantity *EstimatedQuantityType

	// Used to indicate ordering limits on the procurement instrument.
	Limits []LimitsType

	// Specifies which entities are allowed to place orders against the procurement instrument.
	OrderingCapability *struct {
		// Orders can be placed by any entity within the United States Government.
		UnitedStatesGovernment *TrueFalseType

		// Orders may be placed by the specified DoD Agencies. (see list)
		DoDMultiAgency []DoDMultiAgencyType

		// Orders can be placed by any entity within the United States Department of Defense.
		DoDAgencyWide *TrueFalseType

		// Orders may be placed by specific entities only.
		SpecificEntities *TrueFalseType
	}

	// Permitted variations in quantity.
	OrderVariation *OrderVariationType

	// Response Time in number of days within which the contractor must reject an order exceeding the maximum order limits.
	ResponseDaysToRejectOrder *XsPositiveInteger
}

type OrderVariationType struct {
	// Variation expressed as a discrete quantity.
	Quantity *struct {
		// The quantity by which the order can be below the expected quantity.
		QuantityUnder *DecimalElement5OverZeroType

		// The quantity by which the order can be above the expected quantity.
		QuantityOver *DecimalElement5OverZeroType

		// The unit of measure. (see Unit of Measure With Dollars list at dodprocurementtoolbox.com)
		UnitOfMeasure XsString
	}

	// Variation expressed as a percentage.
	Percentage *struct {
		// Express 4.25% as 4.25
		PercentUnder *DecimalElement5ZeroPlusType

		// Express 4.25% as 4.25
		PercentOver *DecimalElement5ZeroPlusType
	}
}

// Organization ID as pre-defined by various entities. Examples are DUNS, CAGE, DoDAAC etc. In accordance with DoD BTA BEA 4.1 OV-7 ORGANIZATION_IDENTIFIER entity.
type OrganizationIDType struct {
	// Austin-Tetra Universal Supplier Identification Number (A-T Number).
	AustinTetraNumber *XsString

	// CAGE: Commercial and Government Entity
	Cage *CAGEType

	// Three character alpha Country code from Geopolitical Entities, Names, and Codes (GENC). (see Country list at dodprocurementtoolbox.com)
	CountryCode *XsString

	// A six digit numeric code denoting the Service Ordering Authority on a telecommunications document.
	DemanderCode *XsString

	// DODAAC: Department of Defense Activity Address Code.
	DoDAAC *DoDAACType

	// DUNS+4: Data Universal Numbering System identifier with four character suffix.
	Duns4Number *Duns4NumberType

	// DUNS: Data Universal Numbering System Identifier.
	DunsNumber *DunsNumberType

	// The Electronic Funds Transfer (EFT) indicator.
	EFTIndicator *XsString

	// Government Unique Entity Identifier.
	GovernmentUniqueEntityIdentifier *GovernmentUniqueEntityIdentifierType

	// MAPAC: Military Assistance Program Address Code.
	Mapac *MAPACType

	// OUID: Organization Unique Identifier.
	OUID *XsString

	// Number obtained from the Social Security Administration (SSA) that identifies an individual.
	SocialSecurityNumber *XsString

	// An Employer Identification Number (EIN) issued by the IRS and used to identify a business entity. Also known as a federal tax identification number.
	EmployerIdentificationNumber *XsString

	// Delivery Zones: Values include "CONUS", "WORLD".
	Zone *XsString

	// The designator that distinguishes one postal zone from another. May only be used on a solicitation when Address Description is Ship To.
	ShippingPostalCode *PostalCodeType

	// Use to provide other identifiers that aren't provided as distinct elements.
	AlternateIdentifier []AlternateIdentifierType
}

type OrganizationAddressType struct {
	// The address in free form text.
	FreeFormAddress *FreeFormAddressType

	// Address structure for real property as defined by the DoD Business Enterprise Architecture (BEA).
	RealPropertyAddress *RealPropertyAddressType

	USPostalAddress *USPostalAddressType
}

// Generic Organization Details - Common for supplier, buyer, contractor etc.
type OrganizationDetailType struct {
	// Organization Identifier. When Address Description is "Survey Site" or "Pre-Property Inspection Location" and no other Organization Identifier applies, provide Zone or Alternate Identifier.
	OrganizationID OrganizationIDType

	// Required if the organization cannot be identified in Organization Id with an acceptable alternative.
	OrganizationNameAddress *OrganizationNameAddressType
}

// Organization Name and Address generic type.
type OrganizationNameAddressType struct {
	// The name of the organization.
	OrganizationName XsString

	// The address of the organization.
	OrganizationAddress OrganizationAddressType

	// The longitude and latitude coordinates of the address.
	OrganizationCoordinates *LocationCoordinatesType
}

type OtherDiscountsType struct {
	// Type of general discount. (see list)
	OtherDiscountDescription XsToken

	// The discount to be applied.
	Discount DiscountValueType2
}

// High level Packaging requirements.
type PackagingMarkingLoadingType struct {
	// Describes a packaging requirement. (see list)
	PackagingDescription *XsToken

	// Packaging details.
	PackagingSpecifications []struct {
		// Packaging characteristics from an authoritative source.
		AgencySpecifiedPackaging *AgencySpecifiedPackagingType

		// Use to provide supplemental or special packaging instructions.
		SpecialInstructions *XsString

		// Shipment options of palletized or shrink-wrap. (see list)
		PackagingLoadOption *XsToken
	}
}

type PackingQuantityType struct {
	// Number of units (pieces, supplier units, unit packs etc.) in an individual pack.
	PackQuantity XsPositiveInteger

	// Special condition applicable to the pack quantity. (see list)
	SpecialCondition XsToken
}

type PackMeasurementsType struct {
	// The pack weight.
	Weight *WeightType

	// The pack volume.
	Volume *VolumeType

	// The pack size.
	Size *SizeType
}

type ParentClinType struct {
	// The first four numbers of the line item. (Range 0001 to 9999)
	LineItemBase LineItemBaseType

	// Two character extension denoting a sub line item. (Range AA-ZZ, except letters I or O).
	SlinExtension *SlinExtensionType
}

type PaymentDiscountType struct {
	// Terms of the discount.
	Terms *struct {
		// Discount percentage. Express 4.25% as 4.25
		Percent DecimalElement5OverZeroType

		// Number of calendar days by which payment must be made to receive the discount.
		DaysDue XsPositiveInteger
	}

	// Number of days until total invoice amount is due. Must be between 1 and 30 inclusive.
	NetDays *XsPositiveInteger
}

type PercentAmountType struct {
	// The type of percentage to be applied. (see list)
	PercentDescription XsToken

	// The percentage to be applied. Express 4.25% as 4.25
	PercentValue DecimalElement5Type
}

type PostalCodeType struct {
	// 5 digit postal code used in the United States.
	USZipCode *XsString

	// 4 digit postal code extension used in the United States.
	USZipCodeExtension *XsString

	// Postal zone designator for non-US addresses.
	ForeignPostalCode *XsString
}

// Award Modification or Solicitation Amendment amount structure.
type ProcurementInstrumentAmountsModificationType struct {
	// Currencies that apply to the procurement instrument.
	HeaderCurrency *struct {
		// The buying and/or payment currencies that apply to an award or award modification.
		AwardCurrency *CurrencyDetailsType

		// The currency requirements for a solicitation response.
		SolicitationCurrency *struct {
			// Denotes that any currency may be used in the response. (see list)
			AnyCurrency *TrueType

			// Denotes that the response must be in US dollars. (see list)
			USDollarsOnly *TrueType

			// The textual name of the foreign currency that must be used in the response (may include US Dollar from ISO 4217 from the International Organization for Standardization. (see Currency list at dodprocurementtoolbox.com)
			ForeignCurrency []XsString
		}
	}

	// Changes to taxes that apply to the total order amount.
	TaxesModificationDetails *struct {
		// Contains taxes that are added.
		AddedTaxes []TaxDetailType1

		// Contains taxes that are removed.
		DeletedTaxes []TaxDetailType1

		// Contains taxes that are modified.
		ChangedTaxes []struct {
			// Description of the change to the tax.
			TaxesChangeText XsString

			// The tax after the change was applied. The result.
			CurrentTax TaxDetailType1

			// The tax before the change was applied. The original.
			PreviousTax TaxDetailType1
		}
	}

	// Changes to obligation amounts.
	ObligatedAmountsModificationDetails *struct {
		// Contains obligated amounts that are added.
		AddedObligatedAmounts []ContractObligatedAmountType

		// Used when obligated amount is reduced to zero because of the modification.
		DeletedObligatedAmounts []ContractObligatedAmountType

		// Used to record changes to an existing obligated amount and/or associated information that does not result in a zero obligated amount.
		ChangedObligatedAmounts []struct {
			// Description of the change to the obligated amount.
			ObligatedAmountsChangeText XsString

			// The change in the obligated amount. If no change, enter zero. If the current obligated amount is less than the previous obligated amount, enter a negative number.
			ObligatedAmountDelta DecimalElement5Type

			// The obligated amount after the change was applied. The result.
			CurrentObligatedAmount ContractObligatedAmountType

			// The obligated amount before the change was applied. The original.
			PreviousObligatedAmount ContractObligatedAmountType
		}
	}

	// Amounts other than obligated amounts.
	OtherAmounts []AmountType

	// Changes to undefinitized other amounts.
	UndefinitizedOtherAmountsModificationDetails *struct {
		// Contains undefinitized other amounts that are added.
		AddedUndefinitizedOtherAmounts *UndefinitizedOtherAmountsType

		// Used when undefinitized other amounts are reduced to zero because of the modification.
		DeletedUndefinitizedOtherAmounts []UndefinitizedOtherAmountsType

		// Used to record changes to an existing undefinitized other amounts that does not result in a zero undefinitized other amounts.
		ChangedUndefinitizedOtherAmounts []struct {
			// Description of the change to the undefinitized other amounts.
			UndefinitizedOtherAmountsChangeText XsString

			// The undefinitized other amounts after the change was applied. The result.
			CurrentUndefinitizedOtherAmounts UndefinitizedOtherAmountsType

			// The undefinitized other amounts before the change was applied. The original.
			PreviousUndefinitizedOtherAmounts UndefinitizedOtherAmountsType
		}
	}
}

// Award amount structure
type ProcurementInstrumentAmountsType struct {
	// Currencies that apply to the procurement instrument.
	HeaderCurrency *struct {
		// The buying and/or payment currencies that apply to an award or award modification.
		AwardCurrency *CurrencyDetailsType

		// The currency requirements for a solicitation response.
		SolicitationCurrency *struct {
			// Denotes that any currency may be used in the response. (see list)
			AnyCurrency *TrueType

			// Denotes that the response must be in US dollars. (see list)
			USDollarsOnly *TrueType

			// The textual name of the foreign currency that must be used in the response (may include US Dollar from ISO 4217 from the International Organization for Standardization. (see Currency list at dodprocurementtoolbox.com)
			ForeignCurrency []XsString
		}
	}

	// Taxes that apply to the total order amount.
	Taxes []TaxDetailType1

	// Obligation amount. Must be greater than zero.
	ObligatedAmounts []ContractObligatedAmountType

	// Amounts other than obligated amounts.
	OtherAmounts []AmountType

	// Amounts applicable to undefinitized contract actions. Multiple iterations are allowed only on conformed documents from Electronic Data Access (EDA).
	UndefinitizedOtherAmounts []UndefinitizedOtherAmountsType
}

// Data common to the entire award modification or solicitation amendment procurement instrument.
type ProcurementInstrumentHeaderModificationDetails struct {
	// The unique identifier of the modified or amended procurement instrument.
	ProcurementInstrumentIdentifier ProcurementInstrumentType

	// Records procurement instrument identifiers that have been added, removed, or modified.
	ProcurementInstrumentIdentifierModificationDetails []struct {
		// Contains procurement instrument identifiers that are added.
		AddedProcurementInstrumentIdentifier []ProcurementInstrumentType

		// Contains procurement instrument identifiers that are removed.
		DeletedProcurementInstrumentIdentifier []ProcurementInstrumentType

		// Contains procurement instrument identifiers that are modified.
		ChangedProcurementInstrumentIdentifier []struct {
			// Description of the change to the procurement instrument identifier.
			ProcurementInstrumentIdentifierChangeText XsString

			// The procurement instrument identifier after the changes were applied. The results.
			CurrentProcurementInstrumentIdentifier ProcurementInstrumentType

			// The procurement instrument identifier before the changes were applied. The original.
			PreviousProcurementInstrumentIdentifier ProcurementInstrumentType
		}
	}

	// Miscellaneous procurement instrument information.
	BasicInformation HeaderBasicInformationModificationType

	// Clause or provision information that applies to the procurement instrument.
	ClauseInformation *struct {
		// The URL where the text of the clauses or provisions in a Regulation, Supplement, or Issuing Agency can be found.
		RegulationURL []XsString

		// Records clauses or provisions that have been added, removed, or modified.
		ClauseModificationDetails *ClauseModificationType
	}

	// Records construction project details that have been added, removed, or modified.
	ConstructionProjectModificationDetails *struct {
		// Contains construction project information that is added.
		AddedConstructionProject []ConstructionProjectDetailsType

		// Contains construction project information that is deleted.
		DeletedConstructionProject []ConstructionProjectDetailsType

		// Contains construction project information that is modified.
		ChangedConstructionProject []struct {
			// Description of the change to the construction project information.
			ConstructionProjectChangeText XsString

			// The construction project information after the changes were applied. The results.
			CurrentConstructionProject ConstructionProjectDetailsType

			// The construction project information before the changes were applied. The original.
			PreviousConstructionProject ConstructionProjectDetailsType
		}
	}

	// Information pertinent to the award modification or solicitation amendment procurement instrument.
	ModificationDetails struct {
		// For an Award Modification, the procurement instrument number(s) of the award or one or both of the ACO Modification and PCO Modification to which the modification is being applied. For a Solicitation Amendment, the solicitation or amendment to which the amendment is being applied.
		DocumentsBeingModified []struct {
			// The procurement instrument number whose Procurement Instrument Effective Date and/or Procurement Instrument Periods are being changed.
			DocumentBeingModified ProcurementInstrumentType

			// The signature date of the document being modified in CCYY-MM-DD format.
			DocumentBeingModifiedSignedDate XsDate
		}

		// A short text description of the purpose and content of the modification or amendment based on the requirements of the Federal Procurement Data System - Next Generation (FPDS-NG).
		ModificationDescription XsString

		// The reason for the modification based on the requirements of the Federal Procurement Data System - Next Generation (FPDS-NG). Required for modifications. (see Modification Reason list at dodprocurementtoolbox.com)
		ModificationReason *XsString

		// Reasons for the modification in addition to the one that would be reported to the Federal Procurement Data System - Next Generation (FPDS-NG). (see Additional Modification Reason list at dodprocurementtoolbox.com)
		AdditionalModificationReason []XsString

		// The project number.
		ProjectNumber *XsString

		// The purchase requisition number.
		PurchaseRequisitionNumber *XsString

		// Information relevant to a solicitation amendment procurement instrument. May not be used for modifications.
		AmendmentInformation *struct {
			// The number of copies that is to be completed and signed by a contractor to acknowledge receipt of the amendment document.
			AcknowledgeReceiptCopies *XsPositiveInteger

			// Amendment text that does not change the text of the solicitation such as questions and answers.
			AmendmentDescriptiveText *XsString

			// Indicates whether or not the hour and date specified for receipt of Offers is extended. (see list)
			OfferReceiptExtended TrueFalseType
		}

		// For a modification, must provide the addresses of the issuing office and the contractor. If applicable to the modification, provide the address of the administrative office. For a Solicitation, must provide the address of the issuing office.
		ModificationAddresses []AddressDetailType

		// Authorization and contractor signature requirement for the modification. Required on modifications; not allowed on amendments.
		ModificationAuthority *struct {
			// States whether or not the contractor is required to sign the modification document.
			ContractorSignatureRequired TrueFalseType

			// The authority under which the change order is issued.
			ChangeOrderAuthority *XsString

			// Denotes that the modification was made to reflect administrative changes pursuant to the authority of FAR 43.103(b)
			AdministrativeChanges *TrueType

			// The authority under which the supplemental agreement is entered.
			SupplementalAgreementAuthority *XsString

			// The type of modification and authority if not covered by a Change Order, Supplemental Agreement, or Administrative Changes authority.
			OtherAuthority *XsString
		}
	}

	// Changes to dates and date periods applicable to the procurement instrument(s) being modified.
	ModifiedProcurementInstrumentDates []ModifiedDatesHeaderOnlyType

	// Effective Date and signatures applicable to the represented procurement instrument.
	ProcurementInstrumentDates DatesModificationHeaderOnlyType

	// Addresses applicable to the procurement instrument.
	ProcurementInstrumentAddresses []AddressDetailModificationType

	// Amounts and pricing that impact the entire procurement instrument. On Amendments, use Header Currency only.
	ProcurementInstrumentAmounts *ProcurementInstrumentAmountsModificationType

	// Delivery details including dates that impact the entire procurement instrument.
	DeliveryDetails *DeliveryDetailsModificationType

	// Provides selected information such as clauses, discounts, etc. that is applicable to a subset of the procurement instrument line items.
	MultipleLineItemsInformation *MultipleLineItemsInformationModificationType

	// Discounts applicable to the award instrument.
	OrderingDiscounts *DiscountDetailModificationType1

	// Payment discount information.
	PaymentDiscount *struct {
		// Contains payment discount information that was added.
		AddedPaymentDiscounts []PaymentDiscountType

		// Contains payment discount information that was removed.
		DeletedPaymentDiscounts []PaymentDiscountType

		// Contains payment discount information that was modified.
		ChangedPaymentDiscounts []struct {
			// Description of the change to the payment discount information.
			PaymentDiscountChangeText XsString

			// The payment discount information after the change was applied. The result.
			CurrentPaymentDiscount PaymentDiscountType

			// The payment discount information before the change was applied. The original.
			PreviousPaymentDiscount PaymentDiscountType
		}
	}

	// Identifies paperwork that is required to be attached to the procurement instrument.
	ProcurementInstrumentAttachments *struct {
		// Contains attachments that were added.
		AddedAttachments []AttachmentType

		// Contains attachments that were removed.
		DeletedAttachments []AttachmentType

		// Contains attachments that were modified.
		ChangedAttachments []struct {
			// Description of the change to the attachment.
			AttachmentChangeText XsString

			// The attachment after the change was applied. The result.
			CurrentAttachment AttachmentType

			// The attachment before the change was applied. The original.
			PreviousAttachment AttachmentType
		}
	}

	// Recurring payments of a fixed amount that occur on a specified schedule such as rent. Do not provide on a Solicitation.
	RecurringPayments *struct {
		// Contains the recurring payments information that were added.
		AddedRecurringPayments *InstallmentType

		// Contains recurring payments information that was removed.
		DeletedRecurringPayments *InstallmentType

		// Contains recurring payments information that was modified.
		ChangedRecurringPayments *struct {
			// Description of the change to the recurring payments.
			RecurringPaymentsChangeText XsString

			// The recurring payments after the change was applied. The result.
			CurrentRecurringPayments InstallmentType

			// The recurring payments before the change was applied. The original.
			PreviousRecurringPayments InstallmentType
		}
	}

	// Use to provide numbers referencing documents (MIPR, SOW, GBL, Requisition etc.). Numbers (FMS Case, Package, Drawing etc.), Codes (FSC, Project, Weapon System, etc.) and other Reference Values.
	ReferenceNumber *struct {
		// Contains reference numbers that were added.
		AddedReferenceNumber []ReferenceNumberType

		// Contains reference numbers that were removed.
		DeletedReferenceNumber []ReferenceNumberType

		// Contains reference numbers that were modified.
		ChangedReferenceNumber []struct {
			// Description of the change to the reference number.
			ReferenceNumberChangeText XsString

			// The reference number after the change was applied. The result.
			CurrentReferenceNumber ReferenceNumberType

			// The reference number before the change was applied. The original.
			PreviousReferenceNumber ReferenceNumberType
		}
	}

	// Services, Allowances and Charges.
	ServiceAllowanceCharges *struct {
		// Contains service allowance charges that were added.
		AddedServiceAllowanceCharges []ServiceAllowanceChargeType

		// Contains service allowance charges that were removed.
		DeletedServiceAllowanceCharges []ServiceAllowanceChargeType

		// Contains service allowance charges that were modified.
		ChangedServiceAllowanceCharges []struct {
			// Description of the change to the service allowance charge.
			ServiceAllowanceChargeChangeText XsString

			// The service allowance charge after the change was applied. The result.
			CurrentServiceAllowanceCharge ServiceAllowanceChargeType

			// The service allowance charge before the change was applied. The original.
			PreviousServiceAllowanceCharge ServiceAllowanceChargeType
		}
	}

	// Information pertaining to shipments.
	Shipping *ShippingModificationType

	// Uniform Contract Format (UCF) Section C. Any description or specifications needed in addition to UCF Section B. (This carries statements of objectives, performance work statements, statements of work and similar text descriptions when not separated in an attachment. Specific numbered specifications, standards, and other standardized descriptive data is handled separately under Product or Service Identifiers and Reference Numbers)
	RequirementsDescription *XsString

	// Information relative to a telecommunications contract that have been modified. May only be used when Procurement Instrument Form is DD 428.
	TelecommunicationModificationDetails *struct {
		// Contains telecommunications information that is added.
		AddedTelecommunicationDetails *TelecommunicationDetailsType

		// Contains telecommunications information that is deleted.
		DeletedTelecommunicationDetails *TelecommunicationDetailsType

		// Contains telecommunications information that is modified.
		ChangedTelecommunicationDetails *struct {
			// Description of the change to the telecommunications information.
			TelecommunicationDetailsChangeText XsString

			// The telecommunications information after the changes were applied. The results.
			CurrentTelecommunicationDetails TelecommunicationDetailsType

			// The telecommunications information before the changes were applied. The original.
			PreviousTelecommunicationDetails TelecommunicationDetailsType
		}
	}

	// Wage determination information.
	WageDeterminationDetails *WageDeterminationModificationType
}

type ProcurementInstrumentHeaderType struct {
	// Unique Identifier for a procurement instrument.
	ProcurementInstrumentIdentifier []ProcurementInstrumentType

	// Miscellaneous procurement instrument information.
	BasicInformation HeaderBasicInformationType

	// Clause or provision information that applies to the procurement instrument.
	ClauseInformation *struct {
		// The URL where the text of the clauses or provisions in a Regulation, Supplement, or Issuing Agency can be found.
		RegulationURL []XsString

		// Information about a clause or provision.
		ClauseDetails []ClauseDetailsType
	}

	// Information about one or more projects in a construction contract. May only be used when Procurement Instrument Form is SF 1442 or SF 252
	ConstructionProjectDetails []ConstructionProjectDetailsType

	// Dates and date period applicable to the procurement instrument. Required on Awards. Only Procurement Instrument Periods is allowed on solicitations.
	ProcurementInstrumentDates *DatesHeaderOnlyType

	// Addresses applicable to the procurement instrument. Two addresses, Issuing Office and Contractor, must be provided on awards. Issuing Office must be provided on solicitations.
	ProcurementInstrumentAddresses []AddressDetailType

	// Amounts and pricing that impact the entire procurement instrument. On Solicitations, use Header Currency only.
	ProcurementInstrumentAmounts *ProcurementInstrumentAmountsType

	// Delivery details including dates that impact the entire procurement instrument.
	DeliveryDetails *DeliveryDetailsType

	// Historical information that needs to be captured when a document is being moved from once system to another such as deleted lines and de-obligated lines of accounting. May only be provided when Document Purpose is "Migration".
	MigrationDetails *struct {
		// Information on the last modification issued for the procurement document.
		LastModification struct {
			// Denotes that neither a procurement nor an administrative modification has been issued for the procurement document.
			NoModificationIssued *TrueType

			// Value that identifies the last procurement (P) modification number of the procurement instrument. Do not provide if none were issued.
			ProcurementModificationIdentifier *XsString
		}

		// List of Contract Data Requirements List (CDRL) that have been removed or deleted from the document.
		RemovedCDRLS []struct {
			// Enter the first (A-Z) or first two (AA-ZZ) characters of the exhibit line item. Do not use the letter I or O. (Block B)
			Exhibit ElinBaseType

			// The exhibit serial number. If the Exhibit is one character, then provide 3 characters: position 1 must be 0-9, positions 2 and 3 must be 0-9 and A-Z. If the Exhibit is two characters, then provide 2 characters (0-9 and A-Z). Do not use the letter I or O. Provide only when part of the ELIN has been deleted. When not provided, the entire Exhibit was removed.
			ElinNumber []ElinNumberType

			// The parent contract line item number of the exhibit line item.
			ParentLineItem ParentClinType
		}

		// List of funding lines that have been removed or deleted from the document.
		RemovedFundingLines []struct {
			// The Accounting Classification Reference Number (ACRN).
			ACRN ACRNType

			// Where financial data is accounted for.
			AccountingIdentifier *AccountingIdentifierType

			// Financial information based on a line of accounting.
			LoaDetails *struct {
				// Use only when the line of accounting cannot be represented by its individual components.
				Blob *XsString

				// The Line Of Accounting represented by its individual components.
				LOA []LoaCodeType

				// The Standard Line Of Accounting (SLOA) represented by its individual components.
				SLOA []struct {
					// SLOA Component description. (see SLOA Component list at dodprocurementtoolbox.com)
					SLOAComponentTitle XsString

					// The value of the component listed in SLOA Component Title.
					SLOAComponentValue XsString
				}
			}
		}

		// List of line items that have been removed or deleted from the document.
		RemovedLineItems []LineItemIdentifierType

		// Use to carry additional information that may be required by the receiving system.
		AdditionalDetails []struct {
			// Describes the information provided. (see Information Description list at dodprocurementtoolbox.com)
			InformationDescription *XsString

			// Description of the information when not covered by one of the information description options.
			AlternateInformationDescription *XsString

			// When appropriate, the line item that the information is associated with.
			ApplicableLineItem *LineItemIdentifierType

			// Use when the additional information is an amount.
			Amount *XsFloat

			// Text with html tags. Use when the additional information is not an amount. Contents must be enclosed with CDATA.
			FormattedText *XsString

			// Use when the additional information is not an amount and does not contain html tags.
			Text *XsString
		}
	}

	// Provides selected information such as clauses, discounts, etc. that is applicable to a subset of the procurement instrument line items.
	MultipleLineItemsInformation *MultipleLineItemsInformationType

	// Discounts applicable to the award instrument.
	OrderingDiscounts *DiscountDetailType1

	// Payment discount information.
	PaymentDiscount []PaymentDiscountType

	// Identifies paperwork that is required to be attached to the procurement instrument.
	ProcurementInstrumentAttachments []AttachmentType

	// Recurring payments of a fixed amount that occur on a specified schedule such as rent. Do not provide on a Solicitation.
	RecurringPayments *InstallmentType

	// Use to provide numbers referencing documents (MIPR, SOW, GBL, Requisition etc.). Numbers (FMS Case, Package, Drawing etc.), Codes (FSC, Project, Weapon System, etc.) and other Reference Values.
	ReferenceNumber []ReferenceNumberType

	// Services, Allowances and Charges.
	ServiceAllowanceCharges []ServiceAllowanceChargeType

	// Information pertaining to shipments.
	Shipping *ShippingType

	// Uniform Contract Format (UCF) Section C. Any description or specifications needed in addition to UCF Section B. (This carries statements of objectives, performance work statements, statements of work and similar text descriptions when not separated in an attachment. Specific numbered specifications, standards, and other standardized descriptive data is handled separately under Product or Service Identifiers and Reference Numbers)
	RequirementsDescription *XsString

	// Information relative to a telecommunications contract. May only be used when Procurement Instrument Form is DD 428.
	TelecommunicationDetails *TelecommunicationDetailsType

	// Wage determination information.
	WageDeterminationDetails *WageDeterminationType
}

type ProcurementInstrumentNumberFormatType struct {
	// A generic code that identifies the entity that issued the procurement instrument.
	EnterpriseIdentifier XsString

	// Code that identifies the year
	Year XsString

	// One digit code that identifies the type of procurement instrument. (see list)
	ProcurementInstrumentTypeCode ProcurementInstrumentTypeCodeType

	// Value that separates this procurement instrument from all other procurement instruments with the same Enterprise Identifier, Year, and Procurement Instrument Type Code.
	SerializedIdentifier XsString

	// The release, delivery, or task order number.
	OrderNumber *OrderNumberType

	// Value that identifies the modification number of the order.
	OrderModificationIdentifier *OrderModificationIdentifierType

	// Value that identifies the modification number of the procurement instrument.
	ProcurementInstrumentModificationIdentifier *ProcurementInstrumentModificationIdentifierType

	// The solicitation amendment number. Must be 4 numeric digits between 0001 and 9999.
	AmendmentNumber *AmendmentNumberType
}

// Details about a procurement instrument number as well as the procurement instrument number. For award/original document only.
type ProcurementInstrumentType struct {
	// Federal/ DoD Agency or Service from where the procurement instrument is originating. (see Procurement Instrument Origin list at dodprocurementtoolbox.com)
	ProcurementInstrumentOrigin XsString

	// Procurement instrument vehicle like a Schedule etc. (see list)
	ProcurementInstrumentVehicle ProcurementInstrumentListType

	// Procurement Instrument Number defined following the rules of the applicable non-DoD agency and/or vehicle.
	UniformProcurementInstrumentIdentifier *UniformProcurementInstrumentIdentifierType

	// Procurement Instrument Number defined following the rules of the applicable DoD agency and/or vehicle.
	ProcurementInstrumentNumber *ProcurementInstrumentNumberFormatType

	// Use when the procurement instrument is non-Department of Defense and cannot be mapped using the separate fields under Procurement Instrument Number.
	NonDoDNumber *NonDoDNumberType

	// Describes the relationship of the procurement instrument listed to the procurement instrument represented in the transaction. (see list)
	ProcurementInstrumentDescription ProcurementInstrumentDescriptionType
}

type PricingArrangementType struct {
	// Pricing arrangement. (see list)
	PricingArrangementBase PricingArrangementBaseType

	// Denotes whether or not there is an award fee.
	AwardFee *TrueType

	// Denotes whether or not there is a performance incentive. Cannot be true if any other value is provided. (see list)
	PerformanceIncentive []PerformanceIncentiveType
}

type ProductServiceIdentifierType struct {
	// Label that identifies a related set of product service data. It will not appear on the rendered document.
	ProductServiceGroup *XsString

	// Description of the Data Value contents. (see Product Service Data list at dodprocurementtoolbox.com)
	DataDescription XsString

	// The value associated with the product or service.
	DataValue XsString
}

// Product/Service and the quantity being purchased.
type ProductServiceQuantityType struct {
	// States whether the line item is for a product or for a service. (see list)
	ProductOrService XsToken

	// Description of the product or service.
	ProductServiceDescription XsString

	// Quantity ordered.
	Quantity *DecimalElement5OverZeroType

	// Specifies that the item requires UII marking. (see list)
	ItemUIDRequired *TrueType

	// Type of unit price. (see list)
	PriceBasis []XsToken

	// The unit of measure. (see Unit of Measure Without Dollars list at dodprocurementtoolbox.com)
	UnitOfMeasure *XsString

	// Price per unit. Cannot be provided when Price Basis is "Not Separately Priced" or the procurement instrument is a solicitation.
	UnitPrice *XsFloat

	// Data about the product or service. Required when Product Or Service is anything other than "Services".
	ProductServiceData []ProductServiceIdentifierType
}

type QuantityType struct {
	// Quantity.
	QuantityValue DecimalElement5OverZeroType

	// The unit of measure. (see Unit of Measure Without Dollars list at dodprocurementtoolbox.com)
	UnitOfMeasure XsString
}

// Start, End value with UOM
type QuantityUomRangeType struct {
	// The lower end of the quantity range or quantity threshold.
	StartValue DecimalElement5ZeroPlusType

	// The upper end of the quantity range.
	EndValue *DecimalElement5OverZeroType

	// The unit of measure. (see Unit of Measure Without Dollars list at dodprocurementtoolbox.com)
	UnitOfMeasure *XsString
}

// Start, End Value only
type QtyAmountRangeType struct {
	// The lower end of the amount range or amount threshold.
	StartValue DecimalElement5ZeroPlusType

	// The upper end of the amount range.
	EndValue *DecimalElement5OverZeroType
}

type RangeOrThresholdDiscountsType struct {
	// Discount group which may be identified by a group identifier, a delivery zone, or a combination of the two.
	DiscountGroupIdentifier *DiscountGroupIdentifierType

	// The type of variable discount. (see list)
	DiscountStructure XsToken

	// Details of a range or a threshold.
	DiscountRangeAndValue []DiscountRangeAndValueType
}

// Address elements as defined in the DoD BTA BEA
type RealPropertyAddressType struct {
	// The designator that distinguishes one apartment or suite from another within the same street address.
	AptSuiteNumber *XsString

	// The code that stands for a directional portion of a street name. (see list)
	StreetDirectionCode *XsToken

	// The term commonly used to refer to the street of the address.
	StreetName *XsString

	// The designator that distinguishes one street address from another within the same street.
	StreetNumber *XsString

	// The code that stands for the type of street of the address as found in the United States Postal Service (USPS) Publication 28 Appendix C Street Abbreviations (April 2012). (see list)
	StreetTypeCode *XsToken

	// The General Services Administration (GSA) Geographic Locator Code (GLC) used to identify the city in which the real property asset or organizational unit is located or the city nearest to the asset. The nearest city shall be in the same county as the asset.
	GSAGLCCityCode XsString

	// The General Services Administration (GSA) Geographic Location Code (GLC) used to identify the primary subdivision of a country such as a state, the District of Columbia, or a possession in which the real property asset or organizational unit is located.
	GSAGLACountryPrimaryDivisionCode XsString

	// The General Services Administration (GSA) Geographic Location Code (GLC) used to identify the county or county equivalent in which the real property asset or site is located.
	GSAGLACountrySubdivisionCode XsString

	// Country code based on FIPS 10-4 as displayed by the General Services Administration (GSA) Worldwide Geographic Location Codes (GLC).
	CountryFIPSCode *XsString

	// Three character alpha Country code from Geopolitical Entities, Names, and Codes (GENC). (see Country list at dodprocurementtoolbox.com)
	CountryA3Code *XsString

	// Three digit numeric Country code from Geopolitical Entities, Names, and Codes (GENC). (see Country list at dodprocurementtoolbox.com)
	CountryN3Code *XsString

	// The textual name of the country from Geopolitical Entities, Names, and Codes (GENC).
	CountryName XsString

	// The narrative geographic description of the Location.
	LocationDirectionsText *XsString

	// Postal Code of an address. See Postcodes from the Universal Postal Union for the correct values.
	PostalZoneCode XsString
}

// A generic structure specifying a reference number.
type ReferenceNumberType struct {
	// Contains additional information when needed.
	DescriptionText *XsString

	// The item for which a reference number is being provided. (see Reference Description list at dodprocurementtoolbox.com)
	ReferenceDescription *XsString

	// Description of the reference number when not covered by one of the reference description options.
	AlternateDescription *XsString

	// The reference number which identifies the item.
	ReferenceValue XsString

	ProcurementInstrumentLocationGroup

	// The date that identifies the version of the item or document provided in Reference Value. Date in CCYY-MM-DD format.
	VersionDate *XsDate
}

type ReplacementPriceType struct {
	// Price per unit.
	Price XsFloat

	// The quantity when price is for more than a single item. For example, when 3 for $10, cite 3.
	Quantity *XsPositiveInteger

	// The percentage of the replacement price above which repair/overhaul of the item is not cost effective. Express 4.25% as 4.25
	ReplacementPriceLimitPercent *DecimalElement5OverZeroType
}

type RoutingTransitModificationType struct {
	// When Transportation Method contains "Pipeline", provide the Department of Defense Activity Address Code (DoDAAC) of the pipeline."
	PipelineDoDAAC *DoDAACType

	// Method or type of transportation. (see list)
	TransportationMethod *TransportationMethodType

	// Level of transportation service or billing service offered by the carrier. For emergency orders, the transportation requirements. (see list)
	TransportationServiceLevel *TransportationServiceLevelType
}

type RoutingTransitType struct {
	// When Transportation Method contains "Pipeline", provide the Department of Defense Activity Address Code (DoDAAC) of the pipeline."
	PipelineDoDAAC *DoDAACType

	// Method or type of transportation. (see list)
	TransportationMethod *TransportationMethodType

	// Level of transportation service or billing service offered by the carrier. For emergency orders, the transportation requirements. (see list)
	TransportationServiceLevel *TransportationServiceLevelType
}

// Service, allowance, and charge structure.
type ServiceAllowanceChargeType struct {
	// Identifies the type of service, allowance, or charge. (see list)
	SACDescription SACDescriptionType

	// On an Award or Modification document, indicates whether there is a charge, allowance/discount, or no charge for the service. On a Solicitation, indicates the offeror is to provide an amount in the offer. (see list)
	SACIndicator XsToken

	// Details of the range or threshold. Required when the represented document is a contract. Do not provide on a Solicitation.
	SACRangeAndValue *struct {
		// Quantity based range or threshold.
		QuantityRange *QuantityUomRangeType

		// Amount based range or threshold.
		AmountRange *QtyAmountRangeType

		// The value and type of the service, allowance, or charge.
		SACValue DiscountValueType1
	}
}

type ServiceContractActType struct {
	// The SCA wage determination number.
	WageDeterminationNumber XsString

	// The revision date of the wage determination. Date in CCYY-MM-DD format.
	RevisionDate XsDate

	// The revision number of the wage determination.
	RevisionNumber XsString

	// The counties and cities within a state to which the wage determination applies.
	CountyCityState []CountyCityStateType

	// Information on occupations and rates.
	Occupation []struct {
		// The occupation code. For example, 01000.
		OccupationCode XsString

		// The occupation title. For example, Administrative Support And Clerical Occupations.
		OccupationTitle XsString

		// Occupation sub-codes, sub-titles, and minimum wage rates.
		OccupationDetails []struct {
			// The occupation sub-code. For example, 01011.
			OccupationSubCode XsString

			// The occupation sub-title. For example, Accounting Clerk I
			OccupationSubTitle XsString

			// The minimum wage requirement.
			MinimumWageRate DecimalElement2OverZeroType
		}
	}

	// Additional information.
	ServiceContractActText XsString
}

type SetAsideDetailsType struct {
	// The set aside percent. If a total set aside, specify 100%. Express 45% as 45
	SetAsidePercent XsPositiveInteger

	// The type of business the set aside percentage is for. For example, HubZone Small Business. (see Small Business Type list at dodprocurementtoolbox.com)
	SmallBusinessType XsString
}

type ShareRatioModificationType struct {
	// Contains the share ratio that is added.
	AddedShareRatio *ShareRatioType

	// Contains the share ratio that is removed.
	DeletedShareRatio *ShareRatioType

	// Used to record changes to share ratio.
	ChangedShareRatio *struct {
		// Description of the change to the share ratio.
		ShareRatioChangeText XsString

		// The share ratio after the changes were applied. The results.
		CurrentShareRatio ShareRatioType

		// The share ratio before the changes were applied. The original.
		PreviousShareRatio ShareRatioType
	}
}

type ShareRatioType struct {
	// When the total final negotiated cost is less than the total target cost, the percentage or amount that is used to establish the total final price (FAR 52.216-10 (e)(1), 52.216-16 (d)(2)(iii), 52.216-17 (d)(4)(iii)). For a Cost Sharing Contract (FAR 16.303), the percentage of costs to be reimbursed by the Government.
	GovernmentShare []ShareType

	// When the total final negotiated cost is greater than the total target cost, the percentage or amount that is used to establish the total final price (FAR 52.216-10 (e)(1), 52.216-16 (d)(2)(ii), 52.216-17 (d)(2)(ii)). For a Cost Sharing Contract (FAR 16.303), the percentage of costs to be borne by the Contractor.
	ContractorShare []ShareType
}

type ShareType struct {
	// The share percentage. Express 4.25% as 4.25.
	SharePercentage DecimalElement5ZeroPlusType

	// The cap amount.
	CapAmount *DecimalElement5OverZeroType

	// May be used when multiple share ratios are provided to describe when a specific share percentage would be applied.
	ShareDescription *XsString
}

// Shipping details structure. For modification and amendment documents only.
type ShippingModificationType struct {
	// Indicates partial shipments will not be accepted.
	MustShipCompleteIndicator *TrueFalseType

	// Indicates whether or not the item(s) will be shipped in place.
	ShipInPlaceIndicator *TrueFalseType

	// Marks and numbers assigned to shipment containers.
	ContainerMarks *struct {
		// Contains container marks that were added.
		AddedContainerMarks []ContainerMarksNumbers

		// Contains container marks that were removed.
		DeletedContainerMarks []ContainerMarksNumbers

		// Contains container marks that were modified.
		ChangedContainerMarks []struct {
			// Description of the change to the container mark.
			ContainerMarksChangeText XsString

			// The container mark after the change was applied. The result.
			CurrentContainerMarks ContainerMarksNumbers

			// The container mark before the change was applied. The original.
			PreviousContainerMarks ContainerMarksNumbers
		}
	}

	// Freight on Board information.
	FoBDetails *FoBDetailsFINALType

	// High level packaging requirements.
	PackagingRequirements *struct {
		// Contains packaging requirements that were added.
		AddedPackagingRequirements []PackagingMarkingLoadingType

		// Contains packaging requirements that were removed.
		DeletedPackagingRequirements []PackagingMarkingLoadingType

		// Contains packaging requirements that were modified.
		ChangedPackagingRequirements []struct {
			// Description of the change to the packaging requirements.
			PackagingRequirementsChangeText XsString

			// The packaging requirements after the change was applied. The result.
			CurrentPackagingRequirements PackagingMarkingLoadingType

			// The packaging requirements before the change was applied. The original.
			PreviousPackagingRequirements PackagingMarkingLoadingType
		}
	}

	// Transportation information
	TransportationDetails *RoutingTransitModificationType
}

// Shipping details structure. For award/original documents only.
type ShippingType struct {
	// Indicates partial shipments will not be accepted.
	MustShipCompleteIndicator *TrueFalseType

	// Indicates whether or not the item(s) will be shipped in place.
	ShipInPlaceIndicator *TrueFalseType

	// Marks and numbers assigned to shipment containers.
	ContainerMarks []ContainerMarksNumbers

	// Freight on Board information.
	FoBDetails *FoBDetailsFINALType

	// High level packaging requirements.
	PackagingRequirements []PackagingMarkingLoadingType

	// Transportation information
	TransportationDetails *RoutingTransitType
}

// Carries signature date and name and contact information of the signer.
type SigneeType struct {
	// Date in CCYY-MM-DD format.
	SignatureDate XsDate

	// Name and contact information of the signee.
	SigneeDetails ContactType
}

type SizeType struct {
	// The length measurement.
	Length *XsFloat

	// The height measurement.
	Height *XsFloat

	// The width measurement.
	Width *XsFloat

	// The unit of measurement of the length, height, width. (see Unit of Measure Without Dollars list at dodprocurementtoolbox.com)
	SizeMeasurement XsString
}

// Captures changes made to a solicitation or offer.
type SolicitationOfferInformationModificationType struct {
	// Description of the change to the solicitation Information.
	SolicitationOfferInformationChangeText XsString

	// The solicitation information after the changes were applied. The results.
	CurrentSolicitationOfferInformation SolicitationOfferInformationType

	// The solicitation information before the changes were applied. The original.
	PreviousSolicitationOfferInformation SolicitationOfferInformationType
}

// Captures solicitation and Offer/Bid information that appears on an award/mod document.
type SolicitationOfferInformationType struct {
	// The number of days from the date for receipt of offers that, if the government accepts the offer in that time, the offeror agrees to furnish any or all items in accordance with the price set, the designated delivery point(s), and the stated schedule. If not provided by the offeror, 60 days is the default.
	AcceptWithinDays *XsPositiveInteger

	// Provide when the solicitation incorporates by reference FAR 52.212-1 and 52.212-4; and Far 52.212-3 and 52.212.5 are attached.
	AddendaAttached *TrueFalseType

	// The type of award instrument that is expected to be issued such as Blanket Purchase Agreement. (see list)
	ExpectedAwardInstrumentVehicle *ExpectedAwardInstrumentVehicleType

	// When FMS Solicitation is provided, contains the Foreign Military Sales Case Number if known.
	FMSCaseNumber []XsString

	// Denotes that the solicitation is for Foreign Military Sales (FMS). (see list)
	FMSSolicitation *TrueType

	// Solicitation conditions that are applicable to all line items. (see list)
	ItemSpecificCondition []ItemSpecificConditionType

	// Denotes that a multi-year contract will be awarded. (see list)
	MultiYearContract *TrueType

	// Code from the North American Industry Classification System (NAICS)
	NAICSCode *XsString

	// When provided, denotes that an offer guarantee is required. (see list)
	OfferGuaranteeRequired *TrueType

	// The number of calendar days after award that Performance and Payment Bonds must be furnished.
	PerformancePaymentBonds *XsPositiveInteger

	// Denotes that the synopsis needs to be posted to the Government-wide Point of Entry (GPE). (see list)
	PostSynopsis *TrueType

	// Qualification requirements pertinent to the solicitation. (see list)
	QualificationRequirements []QualificationRequirementsType

	// If the contractor is required to sign the solicitation document, provide the number of copies he must provide to the issuing office.
	SignedCopies *XsPositiveInteger

	// The threshold of employees or amount the offeror must meet to respond to the solicitation.
	SizeStandard *struct {
		// Number of employees.
		Employees *XsPositiveInteger

		// Total income in whole figures; for example, 6000.
		AnnualReceipts *XsPositiveInteger
	}

	// Date the solicitation was issued in CCYY-MM-DD format.
	SolicitationIssuedDate *XsDate

	// The type of solicitation such as RFP, RFQ, or IFB.
	SolicitationType *XsToken

	// The list of amendments to the solicitation that the offeror acknowledges receiving.
	AcknowledgedAmendments []struct {
		// The solicitation amendment number. Must be 4 numeric digits between 0001 and 9999.
		AmendmentNumber AmendmentNumberType

		// The date the amendment became effective. (Use CCYY-MM-DD format, where CC stands for century.)
		AmendmentDate XsDate
	}

	// Information on where offers are to be delivered such as number of copies, due date, etc.
	OfferDelivery *struct {
		// The number of sealed copies of the offer that must be provided.
		SealedCopies *XsPositiveInteger

		// Describes the place where offers are taken when hand carried.
		DepositoryLocation *XsString

		// Date and time by which an offer must be delivered.
		RequiredBefore *DateTimeType
	}

	// The name, title, and signature date of the offeror.
	OfferSignature *SigneeType

	// Provides set aside percentage and organization type. If not provided, the solicitation is unrestricted.
	SetAsideDetails *SetAsideDetailsType

	// Person or entity that is the contact for the solicitation.
	SolicitationContact []ContactType

	// Dates that are relevant to a solicitation.
	SolicitationDates []struct {
		// Categorizes the date relevant to a solicitation. (see Solicitation Date Description list at dodprocurementtoolbox.com)
		SolicitationDateDescription XsString

		// A date (and time) relevant to the solicitation.
		SolicitationDate DateTimeType

		// If needed, contains additional information about the date on the solicitation.
		AdditionalInformation *XsString
	}
}

type SpecialPricingType struct {
	// Special price authorization number.
	AuthorizationNumber XsString

	// Seller representation who provided the authorization.
	AuthorizingParty ContactType
}

type TargetDefinitizationScheduleType struct {
	// An identifier that unqiuely identifies an undefinitized contract action.
	UndefinitizedIdentifier *XsString

	// Definitization schedule dates. Must provide the original target date for definitization and dates for the submission of proposal and the beginning of negotiations.
	ScheduleDates []struct {
		// Description of the schedule date. (see list)
		ScheduleDateDescription XsToken

		// The schedule date.
		ScheduleDate DateTimeType
	}
}

type TaxAmountType struct {
	// Monetary amount.
	TaxAmountValue DecimalElement5OverZeroType

	// States whether the tax amount is added, deleted or included in the total order amount. (see list)
	Action XsToken

	// Reference to a Line of Accounting. Must be provided if Action is "Add" or "Delete".
	AccountingClassificationReferenceNumber *ACRNType

	// Reference to the cognizant accounting system. Used instead of the line of accounting. Must be provided if Action is "Add" or "Delete" and Agency Accounting Identifier was used to represent the cognizant accounting system in lieu of the line of accounting.
	AgencyAccountingIdentifier *AgencyAccountingIdentifierType
}

// Tax detail structure.
type TaxDetailType1 struct {
	// Type of tax. (see list)
	TaxDescription TaxCodeType

	// Details about taxes expressed as a monetary amount.
	TaxAmount *TaxAmountType

	// Details about taxes expressed as a percentage.
	TaxPercentage *TaxPercentType
}

type TaxPercentType struct {
	// Express 4.25% as 4.25
	TaxPercentValue DecimalElement5OverZeroType

	// Dollar amount used as a basis in the calculation of the tax.
	DollarBasis *DecimalElement2OverZeroType
}

// Information specific to telecom contracts.
type TelecommunicationDetailsType struct {
	// Describes the specified action requested. (see list)
	TypeAction XsToken

	// Technical characteristics, e.g., frequency response, maximum delay distortion, etc., of the circuit being described.
	CircuitParameters *XsString

	// Defense Information Systems Agency (DISA) Control Number that is used for tracking and maintaining visibility of exercise circuits.
	DISAControlNumber *XsString

	// When applicable, information on circuit diversity which provides for the routing of two or more circuits over different physical routes.
	DiversityRequirements *XsString

	// Guidance to the contractor on how to gain access to military installations. Specifies when and where a security clearance and/or an escort is required as well as additional security instructions as required for the site.
	SiteAndSecurityAccessRequirements *XsString

	// Specifies the testing requirements.
	TestingRequirements *XsString

	// Details about circuits, transmission media, etc. that are to be avoided.
	Avoidance []struct {
		// Denotes what is to be avoided. (see list)
		AvoidanceDescription XsToken

		// The detailed description of what is being avoided.
		AvoidanceValue XsString
	}

	// Details about recurring and non-recurring charges on circuit demand orders.
	ChargeDetails *struct {
		// The total Monthly Recurring Charge (MRC). Does not include any usage charges that will be incurred if a terrestrial Service Access Package is selected
		TotalMonthlyRecurringCharge *DecimalElement5OverZeroType

		// The total one time charge which includes costs associated with priority shipment and equipment items ordered.
		TotalNonRecurringCharge *DecimalElement5OverZeroType

		// The maximum amount of overtime or expediting charges authorized for the contractor.
		OvertimeExpeditingCharge *DecimalElement5OverZeroType
	}

	// Prioritization and restoration information for interrupted circuits.
	CircuitDemandDetails *struct {
		// Requested level of commercial service restoration.
		RequestedCommercialServiceRestorationLevel *XsString

		// The sequence in which the demander requires interrupted circuits to be restored. (see list)
		RestorationPriorityLevel XsToken
	}

	// Information about a circuit.
	CircuitDetails struct {
		// The value of the bandwidth or bit rate. Required when Bandwidth Or Bit Rate Unit Of Measure is provided.
		BandwidthOrBitRateValue *DecimalElement5OverZeroType

		// The unit of measure applicable to the bandwidth or bit rate. Required if Bandwidth Or Bit Rate Value is provided. (see list)
		BandwidthOrBitRateUnitOfMeasure *XsToken

		// When or how the circuit, trunk, or link is made available to the designated user. If 'OTHER", provide the information in Miscellaneous Text. (see list)
		ServiceAvailability *XsToken

		// Indicates that signal conversion by the Telecom Providers (TP) is required.
		SignalConversion *XsString

		// The engineered transmission capability of the circuit or trunk in terms of transmission direction and timing of multidirectional transmissions. (see list)
		TypeOfOperation *XsToken

		// Indicates the mode of signaling. (see list)
		SignalingMode *XsToken
	}

	// Details on telecommunication rates.
	TelecommunicationRates []struct {
		// Brief description about what the rate applies to. For example, MES to Cellular Networks, SMS Messaging, etc.
		RateDescription XsString

		// The rate amount.
		Rate DecimalElement5OverZeroType

		// The unit of measure to which the rate applies such as second, messages, etc. (see Unit of Measure Without Dollars list at dodprocurementtoolbox.com)
		RateUnitOfMeasure XsString
	}

	// Location and contact information about a termination point within the circuit.
	TerminationPoint []struct {
		// The name of the termination that denotes its sequence within the circuit. For example, "A", "B", "C", etc.
		TerminationPointName XsString

		// Defines the location or place at which the communications service terminates within the area encompassed by the named geographical location as found in DISA Circular 310-65-1.
		FacilityCode *XsString

		// The Geographical Location (GEOLOC) of a communication terminal or facility as found in DISA Circular 310-65-1.
		GeoLocation *XsString

		// Room where the user equipment will be located.
		Room *XsString

		// The center (telephone exchange, repeater station, etc.) to which the termination equipment is connected.
		Terminal *XsString

		// Describes the operating instruments to be employed by the user at the termination.
		TerminationEquipment *XsString

		// The address of the termination point.
		Address OrganizationAddressType

		// Details about the portion of the circuit between the termination and the terminal center.
		LocalPartDetails struct {
			// Information about the demarcation point or demark.
			DemarcationPoint *XsString

			// Point of contact for the demarcation Point. Provide only if Demarcation Point is provided.
			DemarcationContact *ContactType

			// Required information for start and applicable change requests for leased circuitry within the United States.
			InsideWireRequirements *XsString

			// Specification of the interconnection between two equipments or systems including the type and function of the interconnecting circuits and the type and form of signals to be interchanged by those circuits.
			Interface *XsString

			// Numbering Plan Area (NPS) and Exchange (NXX). The first 6 digits of a U.S. 10 digit telephone number.
			NumberingPlanAreaAndExchange *XsString

			// Information about the facilities between the vendor's commercial communications interface point and the termination location if applicable.
			TelecommunicationsServiceExtension *XsString

			// Details of unique factors applying to government-owned facilities or commercial companies.
			UniqueInstallationFactors *XsString

			// The technical point of contact who is familiar with the end-user and technical requirements and differs from the user point of contact and the commercial demarcation point of contact.
			TechnicalContact *ContactType
		}
	}
}

type UndefinitizedOtherAmountsType struct {
	// An identifier that is used to group line items together to relate specific information such as amounts related to a specific undefinitized contract action.
	UndefinitizedIdentifier *XsString

	// Amounts specific to undefinitized contract actions (UCA).
	UndefinitizedOtherAmount []struct {
		// Type of Amount applicable to an undefinitized contract actions. (see Undefinitized Amount Description list at dodprocurementtoolbox.com)
		UndefinitizedAmountDescription XsString

		// The amount value. On an award, must be greater than zero.
		UndefinitizedAmount DecimalElement5ZeroPlusType
	}
}

type UniformProcurementInstrumentIdentifierType struct {
	// The Activity Address Code (AAC) of the procurement instrument issuing office.
	ActivityAddressCode DoDAACType_BadMod

	// Code that identifies the year
	Year XsString

	// One digit code that identifies the type of procurement instrument. (see list)
	ProcurementInstrumentTypeCode XsToken

	// Value that separates this procurement instrument from all other procurement instruments with the same Enterprise Identifier, Year, and Procurement Instrument Type Code.
	SerializedIdentifier XsString

	// Value that identifies the modification number of the procurement instrument.
	ProcurementInstrumentModificationIdentifier *XsString

	// The solicitation amendment number. Must be 4 numeric digits between 0001 and 9999.
	AmendmentNumber *AmendmentNumberType
}

type UnitPackType struct {
	// The number of individual pieces or supplier units in a unit pack.
	PiecesPerUnitPack PackingQuantityType

	// Size of an individual piece or supplier unit in a unit pack.
	PieceSize *XsFloat

	// The unit of measurement of the individual piece's or supplier unit's size. (see Unit of Measure Without Dollars list at dodprocurementtoolbox.com)
	PieceSizeMeasurement *XsString
}

// Discount model for variable range pricing.
type UnitPriceType1 struct {
	// Labor rate details.
	LaborRates []LaborRatesType

	// Replacement price for an item being replaced or overhauled.
	ReplacementPrice *ReplacementPriceType

	// The government and contractor share ratio.
	ShareRatio *ShareRatioType

	// Use when line item unit price is a seller authorized special price.
	SpecialPricing *SpecialPricingType

	// Range based pricing details for incremental and step ladder pricing.
	VariableRangePricing []VariablePricingType

	// Price that applicable to a specific Zone only.
	ZonePricing *ZonePricingType
}

// Mailing address based on US Postal Systems Publication 28
type USPostalAddressType struct {
	// Contains information that is not required by the US Postal Services for distribution and Delivery. For example, a mailstop code. When provided, it is the first line of a printed address.
	NonAddressDataLine *XsString

	// The person or entity within the Recipient to whom the mail should be directed. In a printed address, it is placed above the Recipient line.
	AttentionLine *XsString

	// Person or entity. In the printed address, it is placed above the Delivery Address Line or, if provided, the Alternate Location line.
	Recipient XsString

	// Provided when Delivery Address Line cannot carry the complete address. For example, 'Apt C'. In a printed address, it is placed above Delivery Address Line.
	AlternateLocation *XsString

	// The address line. In a printed address, it is placed above the City/State line.
	DeliveryAddressLine XsString

	// The designator that distinguishes a post office box address.
	PostOfficeBox *XsString

	// The designator that distinguishes one city from another.
	City *XsString

	// The designator that distinguishes one Army/Air Force Post Office (APO), Fleet Post Office (FPO), or Diplomat Post Office (DPO) from another.
	MilitaryOrFederalOverseas *XsToken

	// Designates the State, Province, or Territory within a country.
	StateOrProvince XsString

	// The designator that distinguishes one postal zone from another.
	PostalCode PostalCodeType

	// The textual name of the country from Geopolitical Entities, Names, and Codes (GENC).
	Country XsString
}

type VariablePricingType struct {
	// The type of range based pricing being modified. (see Range Based Pricing Type list at dodprocurementtoolbox.com)
	RangeBasedPricingType XsString

	// Incremental: Not used. Step Ladder: When provided, the applicable price is determined by the total units bought across all orders. For example, Order 1 ordered 9 and Order 2 ordered 20. The unit price for Order 2 would be based on the total ordered of 29.
	AccumulatedOrdersPricing *TrueType

	// Incremental: The quantity where the price break applies. For example, if price breaks occur at quantities 11, 21, 31 etc., then if 25 are purchased, the first 10 units are at the first price, the next 10 units are at the second price, and the last 5 units are at the third price. Step Ladder: The quantity range to be ordered to receive the specified price. For example, 1-10 ordered, $100 each; 11-20 ordered, $90 each.
	QuantityRange []struct {
		// Incremental: The quantity where the price break applies. Step Ladder: The lower end of the quantity range.
		StartValue DecimalElement5ZeroPlusType

		// Incremental: Not used. Step Ladder: The upper end of the quantity range. When not provided, the price applies to any quantity equal to or greater than that listed in Start Value.
		EndValue *DecimalElement5OverZeroType

		// Price per unit.
		Price XsFloat
	}
}

type VolumeType struct {
	// The volume amount.
	VolumeValue XsFloat

	// The volume unit of measurement. (see Unit of Measure Without Dollars list at dodprocurementtoolbox.com)
	VolumeMeasurement XsString
}

// Information on wage determinations.
type WageDeterminationModificationType struct {
	// Wage determination information under the Davis-Bacon Act.
	DavisBaconAct *struct {
		// Contains the zone pricing that is added.
		AddedDavisBaconAct []DavisBaconActType

		// Contains the zone pricing that is removed.
		DeletedDavisBaconAct []DavisBaconActType

		// Contains the zone pricing that is modified.
		ChangedDavisBaconAct []struct {
			// Description of the change to the Davis Bacon Act wage determination.
			DavisBaconActChangeText XsString

			// The Davis Bacon Act wage determination information after the change was applied. The result.
			CurrentDavisBaconAct DavisBaconActType

			// The Davis Bacon Act wage determination information before the change was applied. The original.
			PreviousDavisBaconAct DavisBaconActType
		}
	}

	// Wage determination information under the Service Contract Act.
	ServiceContractAct *struct {
		// Contains the zone pricing that is added.
		AddedServiceContractAct []ServiceContractActType

		// Contains the zone pricing that is removed.
		DeletedServiceContractAct []ServiceContractActType

		// Contains the zone pricing that is modified.
		ChangedServiceContractAct []struct {
			// Description of the change to the Service Contract Act wage determination.
			ServiceContractActChangeText XsString

			// The Service Contract Act wage determination information after the change was applied. The result.
			CurrentServiceContractAct ServiceContractActType

			// The Service Contract Act wage determination information before the change was applied. The original.
			PreviousServiceContractAct ServiceContractActType
		}
	}
}

// Information on wage determinations.
type WageDeterminationType struct {
	// Wage determination information under the Davis-Bacon Act.
	DavisBaconAct []DavisBaconActType

	// Wage determination information under the Service Contract Act.
	ServiceContractAct []ServiceContractActType
}

type WeightType struct {
	// The weight amount.
	WeightValue XsFloat

	// The weight unit of measurement. (see Unit of Measure Without Dollars list at dodprocurementtoolbox.com)
	WeightMeasurement XsString

	// Weight description such as Gross. (see list)
	WeightDescription *PackWeightDescriptionType
}

type ZonePricingType struct {
	// Unit price.
	Price XsFloat

	// Identify the zone the price is applicable.
	PriceZone XsString
}

// Enumeration list for Acceptance and Inspection Action
type AcceptInspectActionType XsToken

func (x AcceptInspectActionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *AcceptInspectActionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = AcceptInspectActionType(v)
	return nil
}

// Enumeration list for Acceptance and Inspection Location
type AcceptInspectLocationType XsToken

func (x AcceptInspectLocationType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *AcceptInspectLocationType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = AcceptInspectLocationType(v)
	return nil
}

// Enumeration list for Change Flag: add, delete
type ChangeListType_AddDelete XsToken

func (x ChangeListType_AddDelete) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *ChangeListType_AddDelete) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ChangeListType_AddDelete(v)
	return nil
}

// Enumeration list for Change Flag: add, delete, modify
type ChangeListType_All XsToken

func (x ChangeListType_All) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *ChangeListType_All) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ChangeListType_All(v)
	return nil
}

// Enumeration list for Change Flag: modify
type ChangeListType_Modify XsToken

func (x ChangeListType_Modify) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *ChangeListType_Modify) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ChangeListType_Modify(v)
	return nil
}

// Enumeration List: Security Classifications
type Classification XsToken

func (x Classification) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *Classification) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = Classification(v)
	return nil
}

// Enumeration List: Construction Specifications Institute Division codes (May 21, 2010).
type CSIDivisionType XsToken

func (x CSIDivisionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *CSIDivisionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = CSIDivisionType(v)
	return nil
}

// Enumeration List: Construction Specifications Institute Section codes as defined in the Standard Procurement System.
type CSISectionType XsToken

func (x CSISectionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *CSISectionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = CSISectionType(v)
	return nil
}

// Enumerates all types of dates in a procurement instrument
type DeliveryDescriptionType XsToken

func (x DeliveryDescriptionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *DeliveryDescriptionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DeliveryDescriptionType(v)
	return nil
}

// Enumeration List: Delivery Lead Time Descriptions
type DeliveryLeadTimeQualifierType XsString

func (x DeliveryLeadTimeQualifierType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *DeliveryLeadTimeQualifierType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DeliveryLeadTimeQualifierType(v)
	return nil
}

// Enumeration List: Specify transportation special handling instructions.
type DeliverySpecialHandlingType XsToken

func (x DeliverySpecialHandlingType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *DeliverySpecialHandlingType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DeliverySpecialHandlingType(v)
	return nil
}

// Enumeration list for Document Purpose
type DocumentPurposeType XsToken

func (x DocumentPurposeType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *DocumentPurposeType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DocumentPurposeType(v)
	return nil
}

// Enumeration list for DoD Multi-Agency
type DoDMultiAgencyType XsToken

func (x DoDMultiAgencyType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *DoDMultiAgencyType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DoDMultiAgencyType(v)
	return nil
}

// Enumeration list for Effort Category
type EffortCategoryType XsToken

func (x EffortCategoryType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *EffortCategoryType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = EffortCategoryType(v)
	return nil
}

// Enumeration List: Expected Award Instrument Vehicle values.
type ExpectedAwardInstrumentVehicleType XsToken

func (x ExpectedAwardInstrumentVehicleType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *ExpectedAwardInstrumentVehicleType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ExpectedAwardInstrumentVehicleType(v)
	return nil
}

// Enumeration list for Payment Method
type FoBPointType XsToken

func (x FoBPointType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *FoBPointType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = FoBPointType(v)
	return nil
}

// Enumeration List: HAZMAT Class Code Sources
type HAZMATClassCodeSourceType XsToken

func (x HAZMATClassCodeSourceType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *HAZMATClassCodeSourceType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = HAZMATClassCodeSourceType(v)
	return nil
}

// Enumeration List: Item Specific Condition values.
type ItemSpecificConditionType XsToken

func (x ItemSpecificConditionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *ItemSpecificConditionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ItemSpecificConditionType(v)
	return nil
}

// Enumeration list for Limit Description
type LimitDescriptionType XsToken

func (x LimitDescriptionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *LimitDescriptionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = LimitDescriptionType(v)
	return nil
}

// Enumeration List: Pack Weight
type PackWeightDescriptionType XsToken

func (x PackWeightDescriptionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *PackWeightDescriptionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = PackWeightDescriptionType(v)
	return nil
}

// Enumeration list for Payment Method
type PaymentMethodType XsToken

func (x PaymentMethodType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *PaymentMethodType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = PaymentMethodType(v)
	return nil
}

// Enumeration List: Performance Incentive
type PerformanceIncentiveType XsToken

func (x PerformanceIncentiveType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *PerformanceIncentiveType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = PerformanceIncentiveType(v)
	return nil
}

// Enumeration list for Period Description
type PeriodDescriptionType XsToken

func (x PeriodDescriptionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *PeriodDescriptionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = PeriodDescriptionType(v)
	return nil
}

// Enumeration List: Pricing Arrangements
type PricingArrangementBaseType XsToken

func (x PricingArrangementBaseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *PricingArrangementBaseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = PricingArrangementBaseType(v)
	return nil
}

// Enumeration list for the Procurement Description
type ProcurementInstrumentDescriptionType XsToken

func (x ProcurementInstrumentDescriptionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *ProcurementInstrumentDescriptionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ProcurementInstrumentDescriptionType(v)
	return nil
}

// Enumeration List: Procurement Instrument Types
type ProcurementInstrumentListType XsToken

func (x ProcurementInstrumentListType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *ProcurementInstrumentListType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ProcurementInstrumentListType(v)
	return nil
}

// Enumeration list for the Procurement Instrument Type Code
type ProcurementInstrumentTypeCodeType XsToken

func (x ProcurementInstrumentTypeCodeType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *ProcurementInstrumentTypeCodeType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ProcurementInstrumentTypeCodeType(v)
	return nil
}

// Enumeration List: Qualification Requirements values.
type QualificationRequirementsType XsToken

func (x QualificationRequirementsType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *QualificationRequirementsType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = QualificationRequirementsType(v)
	return nil
}

// Enumeration List: Service, Allowances, and Charges
type SACDescriptionType XsToken

func (x SACDescriptionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *SACDescriptionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = SACDescriptionType(v)
	return nil
}

// Enumeration List: Uniform Contract Format Sections
type SectionType XsToken

func (x SectionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *SectionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = SectionType(v)
	return nil
}

// Enumeration List: Tax Codes (text)
type TaxCodeType XsToken

func (x TaxCodeType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *TaxCodeType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = TaxCodeType(v)
	return nil
}

// Enumeration list for the Transmission Acknowledgement
type TransmissionAcknowledgementType XsToken

func (x TransmissionAcknowledgementType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *TransmissionAcknowledgementType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = TransmissionAcknowledgementType(v)
	return nil
}

// Enumeration List: Transportation Methods
type TransportationMethodType XsToken

func (x TransportationMethodType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *TransportationMethodType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = TransportationMethodType(v)
	return nil
}

// Enumeration List: Transportation Service Levels
type TransportationServiceLevelType XsToken

func (x TransportationServiceLevelType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *TransportationServiceLevelType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = TransportationServiceLevelType(v)
	return nil
}

// Accounting Classification Reference Number (ACRN).
type ACRNType XsString

func (x ACRNType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *ACRNType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ACRNType(v)
	return nil
}

// Six digit Agency Accounting Identifier
type AgencyAccountingIdentifierType XsString

func (x AgencyAccountingIdentifierType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *AgencyAccountingIdentifierType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = AgencyAccountingIdentifierType(v)
	return nil
}

// Four digit Amendment Number.
type AmendmentNumberType XsString

func (x AmendmentNumberType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *AmendmentNumberType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = AmendmentNumberType(v)
	return nil
}

// Commercial and Government Entity (CAGE) code.
type CAGEType XsString

func (x CAGEType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *CAGEType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = CAGEType(v)
	return nil
}

// Format: Decimal type with 2 fraction digits and greater than zero.
type DecimalElement2OverZeroType XsDecimal

func (x DecimalElement2OverZeroType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%.2f", x), start)
}

func (x *DecimalElement2OverZeroType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsDecimal
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DecimalElement2OverZeroType(v)
	return nil
}

// Format: Decimal type with 2 fraction digits
type DecimalElement2Type XsDecimal

func (x DecimalElement2Type) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%.2f", x), start)
}

func (x *DecimalElement2Type) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsDecimal
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DecimalElement2Type(v)
	return nil
}

// Format: Decimal type with 5 fraction digits that is zero or greater.
type DecimalElement5ZeroPlusType XsDecimal

func (x DecimalElement5ZeroPlusType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%.5f", x), start)
}

func (x *DecimalElement5ZeroPlusType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsDecimal
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DecimalElement5ZeroPlusType(v)
	return nil
}

// Format: Decimal type with 5 fraction digits and greater than zero.
type DecimalElement5OverZeroType XsDecimal

func (x DecimalElement5OverZeroType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%.5f", x), start)
}

func (x *DecimalElement5OverZeroType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsDecimal
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DecimalElement5OverZeroType(v)
	return nil
}

// Format: Decimal type with 5 fraction digits.
type DecimalElement5Type XsDecimal

func (x DecimalElement5Type) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%.5f", x), start)
}

func (x *DecimalElement5Type) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsDecimal
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DecimalElement5Type(v)
	return nil
}

// Format: Decimal between -180 and 180 with 5 decimal positions
type DecimalElementCoordinateType XsDecimal

func (x DecimalElementCoordinateType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(fmt.Sprintf("%.5f", x), start)
}

func (x *DecimalElementCoordinateType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsDecimal
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DecimalElementCoordinateType(v)
	return nil
}

// The DoD Information Technology Portfolio Repository (DITPR) Number.
type DITPRType XsString

func (x DITPRType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *DITPRType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DITPRType(v)
	return nil
}

// Department of Defense Activity Address Code (DoDAAC).
type DoDAACType XsString

func (x DoDAACType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *DoDAACType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DoDAACType(v)
	return nil
}

// Invalid Department of Defense Activity Address Code (DoDAAC). Used to carry old bad values on Modification/Amendment documents.
type DoDAACType_BadMod XsString

func (x DoDAACType_BadMod) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *DoDAACType_BadMod) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DoDAACType_BadMod(v)
	return nil
}

// Duns + 4 format. 9 numeric followed by 4 alphanumeric.
type Duns4NumberType XsString

func (x Duns4NumberType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *Duns4NumberType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = Duns4NumberType(v)
	return nil
}

// Duns format. 9 numeric.
type DunsNumberType XsString

func (x DunsNumberType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *DunsNumberType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = DunsNumberType(v)
	return nil
}

// One or two character Exhibit Line Item Base.
type ElinBaseType XsString

func (x ElinBaseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *ElinBaseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ElinBaseType(v)
	return nil
}

// Two or three character Exhibit Line Item Serial Number.
type ElinNumberType XsString

func (x ElinNumberType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *ElinNumberType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ElinNumberType(v)
	return nil
}

// Geographical Location (GEOLOC).
type GEOLOCType XsString

func (x GEOLOCType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *GEOLOCType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = GEOLOCType(v)
	return nil
}

// Standard format for Government Unique Entity Identifier. Also known as SAMMI.
type GovernmentUniqueEntityIdentifierType XsString

func (x GovernmentUniqueEntityIdentifierType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *GovernmentUniqueEntityIdentifierType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = GovernmentUniqueEntityIdentifierType(v)
	return nil
}

// An identifier for a multiple line items group.
type GroupIdentifierType XsString

func (x GroupIdentifierType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *GroupIdentifierType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = GroupIdentifierType(v)
	return nil
}

// Four digit Line Item Base.
type LineItemBaseType XsString

func (x LineItemBaseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *LineItemBaseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = LineItemBaseType(v)
	return nil
}

// Military Assistance Program Address Code (MAPAC).
type MAPACType XsString

func (x MAPACType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *MAPACType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = MAPACType(v)
	return nil
}

// CAGE or DUNS
type NonDoDEntityType XsString

func (x NonDoDEntityType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *NonDoDEntityType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = NonDoDEntityType(v)
	return nil
}

// Four to fifty character non-DoD procurement instrument number.
type NonDoDNumberType XsString

func (x NonDoDNumberType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *NonDoDNumberType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = NonDoDNumberType(v)
	return nil
}

// Two digit Order Modification Identifier.
type OrderModificationIdentifierType XsString

func (x OrderModificationIdentifierType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *OrderModificationIdentifierType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = OrderModificationIdentifierType(v)
	return nil
}

// Four digit Order Number.
type OrderNumberType XsString

func (x OrderNumberType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *OrderNumberType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = OrderNumberType(v)
	return nil
}

// Six digit Procurement Instrument Modification Identifier.
type ProcurementInstrumentModificationIdentifierType XsString

func (x ProcurementInstrumentModificationIdentifierType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *ProcurementInstrumentModificationIdentifierType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = ProcurementInstrumentModificationIdentifierType(v)
	return nil
}

// Two character SLIN Extension.
type SlinExtensionType XsString

func (x SlinExtensionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *SlinExtensionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = SlinExtensionType(v)
	return nil
}

// Format: Value must be "true" or "false"
type TrueFalseType XsToken

func (x TrueFalseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *TrueFalseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = TrueFalseType(v)
	return nil
}

// Format: Value must be "true".
type TrueType XsToken

func (x TrueType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsToken(x).MarshalXML(e, start)
}

func (x *TrueType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsToken
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = TrueType(v)
	return nil
}

// United Nations Code for ports and other locations (UN/LOCODE) in accordance with the United Nations Location Code Manual.
type UnitedNationsCodeType XsString

func (x UnitedNationsCodeType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return XsString(x).MarshalXML(e, start)
}

func (x *UnitedNationsCodeType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v XsString
	if err := v.UnmarshalXML(d, start); err != nil {
		return err
	}
	*x = UnitedNationsCodeType(v)
	return nil
}
